{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Scroll through the pages to view the ATLAS data.","title":"Home"},{"location":"#home","text":"Scroll through the pages to view the ATLAS data.","title":"Home"},{"location":"CaseStudies/","text":"ATLAS Case Studies Evasion of Deep Learning Detector for Malware C&C Traffic AML.CS0000 Case study type: exercise Summary: The Palo Alto Networks Security AI research team tested a deep learning model for malware command and control (C&C) traffic detection in HTTP traffic. Based on the publicly available paper by Le et al. , we built a model that was trained on a similar dataset as our production model and had similar performance. Then we crafted adversarial samples, queried the model, and adjusted the adversarial sample accordingly until the model was evaded. Date: 2020-01-01 Actor: Palo Alto Networks AI Research Team Target: Palo Alto Networks malware detection system Tactic Technique Description AML.TA0002 AML.T0000.001 We identified a machine learning based approach to malicious URL detection as a representative approach and potential target from the paper URLNet: Learning a URL representation with deep learning for malicious URL detection , which was found on arXiv (a pre-print repository). AML.TA0003 AML.T0002.000 We acquired a command and control HTTP traffic dataset consisting of approximately 33 million benign and 27 million malicious HTTP packet headers. AML.TA0001 AML.T0005 We trained a model on the HTTP traffic dataset to use as a proxy for the target model. Evaluation showed a true positive rate of ~ 99% and false positive rate of ~ 0.01%, on average. Testing the model with a HTTP packet header from known malware command and control traffic samples was detected as malicious with high confidence (> 99%). AML.TA0001 AML.T0043.003 We crafted evasion samples by removing fields from packet header which are typically not used for C&C communication (e.g. cache-control, connection, etc.). AML.TA0001 AML.T0042 We queried the model with our adversarial examples and adjusted them until the model was evaded. AML.TA0007 AML.T0015 With the crafted samples, we performed online evasion of the ML-based spyware detection model. The crafted packets were identified as benign with > 80% confidence. This evaluation demonstrates that adversaries are able to bypass advanced ML detection techniques, by crafting samples that are misclassified by an ML model. Botnet Domain Generation Algorithm (DGA) Detection Evasion AML.CS0001 Case study type: exercise Summary: The Palo Alto Networks Security AI research team was able to bypass a Convolutional Neural Network based botnet Domain Generation Algorithm (DGA) detector using a generic domain name mutation technique. It is a generic domain mutation technique which can evade most ML-based DGA detection modules. The generic mutation technique evades most ML-based DGA detection modules DGA and can be used to test the effectiveness and robustness of all DGA detection methods developed by security companies in the industry before they is deployed to the production environment. Date: 2020-01-01 Actor: Palo Alto Networks AI Research Team Target: Palo Alto Networks ML-based DGA detection module Tactic Technique Description AML.TA0002 AML.T0000 DGA detection is a widely used technique to detect botnets in academia and industry. The research team searched for research papers related to DGA detection. AML.TA0003 AML.T0002 The researchers acquired a publicly available CNN-based DGA detection model and tested it against a well-known DGA generated domain name data sets, which includes ~50 million domain names from 64 botnet DGA families. The CNN-based DGA detection model shows more than 70% detection accuracy on 16 (~25%) botnet DGA families. AML.TA0003 AML.T0017 The researchers developed a generic mutation technique that requires a minimal number of iterations. AML.TA0001 AML.T0043.001 The researchers used the mutation technique to generate evasive domain names. AML.TA0001 AML.T0042 The experiment results show that the detection rate of all 16 botnet DGA families drop to less than 25% after only one string is inserted once to the DGA generated domain names. AML.TA0007 AML.T0015 The DGA generated domain names mutated with this technique successfully evade the target DGA Detection model, allowing an adversary to continue communication with their Command and Control servers. VirusTotal Poisoning AML.CS0002 Case study type: incident Summary: McAfee Advanced Threat Research noticed an increase in reports of a certain ransomware family that was out of the ordinary. Case investigation revealed that many samples of that particular ransomware family were submitted through a popular virus-sharing platform within a short amount of time. Further investigation revealed that based on string similarity the samples were all equivalent, and based on code similarity they were between 98 and 74 percent similar. Interestingly enough, the compile time was the same for all the samples. After more digging, researchers discovered that someone used 'metame' a metamorphic code manipulating tool to manipulate the original file towards mutant variants. The variants would not always be executable, but are still classified as the same ransomware family. Date: 2020-01-01 Actor: Unknown Target: VirusTotal Tactic Technique Description AML.TA0003 AML.T0016.000 The actor obtained metame , a simple metamorphic code engine for arbitrary executables. AML.TA0001 AML.T0043 The actor used a malware sample from a prevalent ransomware family as a start to create \"mutant\" variants. AML.TA0004 AML.T0010.002 The actor uploaded \"mutant\" samples to the platform. AML.TA0006 AML.T0020 Several vendors started to classify the files as the ransomware family even though most of them won't run. The \"mutant\" samples poisoned the dataset the ML model(s) use to identify and classify this ransomware family. Bypassing Cylance's AI Malware Detection AML.CS0003 Case study type: exercise Summary: Researchers at Skylight were able to create a universal bypass string that evades detection by Cylance's AI Malware detector when appended to a malicious file. Date: 2019-09-07 Actor: Skylight Cyber Target: CylancePROTECT, Cylance Smart Antivirus Tactic Technique Description AML.TA0002 AML.T0000 The researchers read publicly available information about Cylance's AI Malware detector. They gathered this information from various sources such as public talks as well as patent submissions by Cylance. AML.TA0000 AML.T0047 The researchers used Cylance's AI Malware detector and enabled verbose logging to understand the inner workings of the ML model, particularly around reputation scoring and model ensembling. AML.TA0003 AML.T0017 The researchers used the reputation scoring information to reverse engineer which attributes provided what level of positive or negative reputation. Along the way, they discovered a secondary model which was an override for the first model. Positive assessments from the second model overrode the decision of the core ML model. AML.TA0001 AML.T0043.003 Using this knowledge, the researchers fused attributes of known good files with malware to manually create adversarial malware. AML.TA0007 AML.T0015 Due to the secondary model overriding the primary, the researchers were effectively able to bypass the ML model. Camera Hijack Attack on Facial Recognition System AML.CS0004 Case study type: incident Summary: This type of camera hijack attack can evade the traditional live facial recognition authentication model and enable access to privileged systems and victim impersonation. Two individuals in China used this attack to gain access to the local government's tax system. They created a fake shell company and sent invoices via tax system to supposed clients. The individuals started this scheme in 2018 and were able to fraudulently collect $77 million. Date: 2020-01-01 Actor: Two individuals Target: Shanghai government tax office's facial recognition service Tactic Technique Description AML.TA0003 AML.T0008.001 The attackers bought customized low-end mobile phones. AML.TA0003 AML.T0016.001 The attackers obtained customized Android ROMs and a virtual camera application. AML.TA0003 AML.T0016.000 The attackers obtained software that turns static photos into videos, adding realistic effects such as blinking eyes. AML.TA0003 AML.T0021 The attackers collected user identity information and high definition face photos from an online black market and used the victim's information to register accounts. AML.TA0000 AML.T0047 The attackers used the virtual camera app to present the generated video to the ML-based facial recognition service used for user verification. AML.TA0011 AML.T0015 The attackers successfully evaded the face recognition system. This allowed the attackers to impersonate the victim and verify their their identity in the tax system. Attack on Machine Translation Service - Google Translate, Bing Translator, and Systran Translate AML.CS0005 Case study type: exercise Summary: Machine translation services (such as Google Translate, Bing Translator, and Systran Translate) provide public-facing UIs and APIs. A research group at UC Berkeley utilized these public endpoints to create a replicated model with near-production state-of-the-art translation quality. Beyond demonstrating that IP can be functionally stolen from a black-box system, they used the replicated model to successfully transfer adversarial examples to the real production services. These adversarial inputs successfully cause targeted word flips, vulgar outputs, and dropped sentences on Google Translate and Systran Translate websites. Date: 2020-04-30 Actor: Berkeley Artificial Intelligence Research Target: Google Translate, Bing Translator, Systran Translate Tactic Technique Description AML.TA0002 AML.T0000 The researchers used published research papers to identify the datasets and model architectures used by the target translation services. AML.TA0003 AML.T0002.000 The researchers gathered similar datasets that the target translation services used. AML.TA0003 AML.T0002.001 The researchers gathered similar model architectures that the target translation services used. AML.TA0000 AML.T0040 They abused a public facing application to query the model and produced machine translated sentence pairs as training data. AML.TA0001 AML.T0005.001 Using these translated sentence pairs, the researchers trained a model that replicates the behavior of the target model. AML.TA0011 AML.T0045 By replicating the model with high fidelity, the researchers demonstrated that an adversary could steal a model and violate the victim's intellectual property rights. AML.TA0001 AML.T0043.002 The replicated models were used to generate adversarial examples that successfully transferred to the black-box translation services. AML.TA0011 AML.T0015 The adversarial examples were used to evade the machine translation services by a variety of means. This included targeted word flips, vulgar outputs, and dropped sentences. AML.TA0011 AML.T0031 Adversarial attacks can cause errors that cause reputational damage to the company of the translation service and decrease user trust in AI-powered services. ClearviewAI Misconfiguration AML.CS0006 Case study type: incident Summary: Clearview AI makes a facial recognition tool that searches publicly available photos for matches. This tool has been used for investigative purposes by law enforcement agencies and other parties. Clearview AI's source code repository, though password protected, was misconfigured to allow an arbitrary user to register an account. This allowed an external researcher to gain access to a private code repository that contained Clearview AI production credentials, keys to cloud storage buckets containing 70K video samples, and copies of its applications and Slack tokens. With access to training data, a bad-actor has the ability to cause an arbitrary misclassification in the deployed model. These kinds of attacks illustrate that any attempt to secure ML system should be on top of \"traditional\" good cybersecurity hygiene such as locking down the system with least privileges, multi-factor authentication and monitoring and auditing. Date: 2020-04-16 Actor: Researchers at spiderSilk Target: Clearview AI facial recognition tool Tactic Technique Description AML.TA0003 AML.T0021 A security researcher gained initial access to Clearview AI's private code repository via a misconfigured server setting that allowed an arbitrary user to register a valid account. AML.TA0009 AML.T0036 The private code repository contained credentials which were used to access AWS S3 cloud storage buckets, leading to the discovery of assets for the facial recognition tool, including: - Released desktop and mobile applications - Pre-release applications featuring new capabilities - Slack access tokens - Raw videos and other data AML.TA0003 AML.T0002 Adversaries could have downloaded training data and gleaned details about software, models, and capabilities from the source code and decompiled application binaries. AML.TA0011 AML.T0031 As a result, future application releases could have been compromised, causing degraded or malicious facial recognition capabilities. GPT-2 Model Replication AML.CS0007 Case study type: exercise Summary: OpenAI built GPT-2, a language model capable of generating high quality text samples. Over concerns that GPT-2 could be used for malicious purposes such as impersonating others, or generating misleading news articles, fake social media content, or spam, OpenAI adopted a tiered release schedule. They initially released a smaller, less powerful version of GPT-2 along with a technical description of the approach, but held back the full trained model. Before the full model was released by OpenAI, researchers at Brown University successfully replicated the model using information released by OpenAI and open source ML artifacts. This demonstrates that a bad actor with sufficient technical skill and compute resources could have replicated GPT-2 and used it for harmful goals before the AI Security community is prepared. Date: 2019-08-22 Actor: Researchers at Brown University Target: OpenAI GPT-2 Tactic Technique Description AML.TA0002 AML.T0000 Using the public documentation about GPT-2, the researchers gathered information about the dataset, model architecture, and training hyper-parameters. AML.TA0003 AML.T0002.001 The researchers obtained a reference implementation of a similar publicly available model called Grover. AML.TA0003 AML.T0002.000 The researchers were able to manually recreate the dataset used in the original GPT-2 paper using the gathered documentation. AML.TA0003 AML.T0008.000 The researchers were able to use TensorFlow Research Cloud via their academic credentials. AML.TA0001 AML.T0005.000 The researchers modified Grover's objective function to reflect GPT-2's objective function and then trained on the dataset they curated using used Grover's initial hyperparameters. The resulting model functionally replicates GPT-2, obtaining similar performance on most datasets. A bad actor who followed the same procedure as the researchers could then use the replicated GPT-2 model for malicious purposes. ProofPoint Evasion AML.CS0008 Case study type: exercise Summary: Proof Pudding (CVE-2019-20634) is a code repository that describes how ML researchers evaded ProofPoint's email protection system by first building a copy-cat email protection ML model, and using the insights to bypass the live system. More specifically, the insights allowed researchers to craft malicious emails that received preferable scores, going undetected by the system. Each word in an email is scored numerically based on multiple variables and if the overall score of the email is too low, ProofPoint will output an error, labeling it as SPAM. Date: 2019-09-09 Actor: Researchers at Silent Break Security Target: ProofPoint Email Protection System Tactic Technique Description AML.TA0003 AML.T0002 The researchers first gathered the scores from the Proofpoint's ML system used in email headers by sending a large number of emails through the system and scraping the model scores exposed in the logs. AML.TA0003 AML.T0002.000 The researchers converted the collected scores into a dataset. Basic correlation was used to decide which score variable speaks generally about the security of an email. The \"mlxlogscore\" was selected in this case due to its relationship with spam, phish, and core mlx. AML.TA0001 AML.T0005 Using these scores, the researchers replicated the ML model by building a \"shadow\" aka copy-cat ML model. The \"mlxlogscore\" was the label used for training. Each \"mlxlogscore\" was generally between 1 and 999 (higher score = safer sample). Training was performed using an Artificial Neural Network (ANN) and Bag of Words tokenizing. AML.TA0001 AML.T0043.002 Next, the ML researchers algorithmically found samples from this \"offline\" copy-cat model that helped give desired insight into its behavior and influential variables. Examples of good scoring samples include \"calculation\", \"asset\", and \"tyson\". Examples of bad scoring samples include \"software\", \"99\", and \"unsub\".| |AML.TA0011|AML.T0015|Finally, these insights from the \"offline\" copy-cat model allowed the researchers to create malicious emails that received preferable scores from the real ProofPoint email protection system, hence bypassing it.| Tay Poisoning AML.CS0009 Case study type: incident Summary: Microsoft created Tay, a Twitter chatbot designed to engage and entertain users. While previous chatbots used pre-programmed scripts to respond to prompts, Tay's machine learning capabilities allowed it to be directly influenced by its conversations. A coordinated attack encouraged malicious users to tweet abusive and offensive language at Tay, which eventually led to Tay generating similarly inflammatory content towards other users. Microsoft decommissioned Tay within 24 hours of its launch and issued a public apology with lessons learned from the bot's failure. Date: 2016-03-23 Actor: 4chan Users Target: Microsoft's Tay AI Chatbot Tactic Technique Description AML.TA0000 AML.T0047 Adversaries were able to interact with Tay via Twitter messages. AML.TA0004 AML.T0010.002 Tay bot used the interactions with its Twitter users as training data to improve its conversations. Adversaries were able to coordinate with the intent of defacing Tay bot by exploiting this feedback loop. AML.TA0006 AML.T0020 By repeatedly interacting with Tay using racist and offensive language, they were able to bias Tay's dataset towards that language as well. This was done by adversaries using the \"repeat after me\" function, a command that forced Tay to repeat anything said to it. AML.TA0011 AML.T0031 As a result of this coordinated attack, Tay's conversation algorithms began to learn to generate reprehensible material. Tay's internalization of this detestable language caused it to be unpromptedly repeated during interactions with innocent users. Microsoft Azure Service Disruption AML.CS0010 Case study type: exercise Summary: The Microsoft AI Red Team performed a red team exercise on an internal Azure service with the intention of disrupting its service. This operation had a combination of traditional ATT&CK enterprise techniques such as finding valid account, and exfiltrating data -- all interleaved with adversarial ML specific steps such as offline and online evasion examples. Date: 2020-01-01 Actor: Microsoft AI Red Team Target: Internal Microsoft Azure Service Tactic Technique Description AML.TA0002 AML.T0000 The team first performed reconnaissance to gather information about the target ML model. AML.TA0004 AML.T0012 The team used a valid account to gain access to the network. AML.TA0009 AML.T0035 The team found the model file of the target ML model and the necessary training data. AML.TA0010 AML.T0025 The team exfiltrated the model and data via traditional means. AML.TA0001 AML.T0043.000 Using the target model and data, the red team crafted evasive adversarial data in an offline manor. AML.TA0000 AML.T0040 The team used an exposed API to access the target model. AML.TA0001 AML.T0042 The team submitted the adversarial examples to the API to verify their efficacy on the production system. AML.TA0011 AML.T0015 The team performed an online evasion attack by replaying the adversarial examples and accomplished their goals. Microsoft Edge AI Evasion AML.CS0011 Case study type: exercise Summary: The Azure Red Team performed a red team exercise on a new Microsoft product designed for running AI workloads at the Edge. This exercise was meant to use a automated system to continuously manipulate a target image to cause the ML model to produce misclassifications. Date: 2020-02-01 Actor: Azure Red Team Target: New Microsoft AI Product Tactic Technique Description AML.TA0002 AML.T0000 The team first performed reconnaissance to gather information about the target ML model. AML.TA0003 AML.T0002 The team identified and obtained the publicly available base model to use against the target ML model. AML.TA0000 AML.T0040 Using the publicly available version of the ML model, the team started sending queries and analyzing the responses (inferences) from the ML model. AML.TA0001 AML.T0043.001 The red team created an automated system that continuously manipulated an original target image, that tricked the ML model into producing incorrect inferences, but the perturbations in the image were unnoticeable to the human eye. AML.TA0011 AML.T0015 Feeding this perturbed image, the red team was able to evade the ML model by causing misclassifications. Face Identification System Evasion via Physical Countermeasures AML.CS0012 Case study type: exercise Summary: MITRE's AI Red Team demonstrated a physical-domain evasion attack on a commercial face identification service with the intention of inducing a targeted misclassification. This operation had a combination of traditional ATT&CK enterprise techniques such as finding Valid account, and Executing code via an API - all interleaved with adversarial ML specific attacks. Date: 2020-01-01 Actor: MITRE AI Red Team Target: Commercial Face Identification Service Tactic Technique Description AML.TA0002 AML.T0000 The team first performed reconnaissance to gather information about the target ML model. AML.TA0004 AML.T0012 The team gained access to said service via a valid account to gain access and knowledge to api. AML.TA0000 AML.T0040 The team accessed the inference API of the target model. AML.TA0008 AML.T0013 The team identified the list of identities targeted by the model by querying the target model's inference API. AML.TA0003 AML.T0002.000 The team acquired representative open source data. AML.TA0001 AML.T0005 The team developed a proxy model using the open source data. AML.TA0001 AML.T0043.000 Using the proxy model, the red team optimized adversarial visual pattern as a physical domain patch-based attack using expectation over transformation. AML.TA0000 AML.T0041 The team placed the physical countermeasure from the previous step and placed it in the physical environment to cause issues in the face identification system. AML.TA0011 AML.T0015 The team successfully evaded the model using the physical countermeasure and causing targeted misclassifications. Backdoor Attack on Deep Learning Models in Mobile Apps AML.CS0013 Case study type: exercise Summary: Deep learning models are increasingly used in mobile applications as critical components. Researchers from Microsoft Research demonstrated that many deep learning models deployed in mobile apps are vulnerable to backdoor attacks via \"neural payload injection.\" They conducted an empirical study on real-world mobile deep learning apps collected from Google Play. They identified 54 apps that were vulnerable to attack, including popular security and safety critical applications used for cash recognition, parental control, face authentication, and financial services. Date: 2021-01-18 Actor: Yuanchun Li, Jiayi Hua, Haoyu Wang, Chunyang Chen, Yunxin Liu Target: ML-based Android Apps Tactic Technique Description AML.TA0002 AML.T0004 To identify a list of potential target models, the researchers searched the Google Play store for apps that may contain embedded deep learning models by searching for deep learning related keywords. AML.TA0003 AML.T0002.001 The researchers acquired the apps' APKs from the Google Play store. They filtered the list of potential target applications by searching the code metadata for keywords related to TensorFlow or TFLite and their model binary formats (.tf and .tflite). The models were extracted from the APKs using Apktool. AML.TA0000 AML.T0044 This provided the researchers with full access to the ML model, albeit in compiled, binary form. AML.TA0003 AML.T0017 The researchers developed a novel approach to insert a backdoor into a compiled model that can be activated with a visual trigger. They inject a \"neural payload\" into the model that consists of a trigger detection network and conditional logic. The trigger detector is trained to detect a visual trigger that will be placed in the real world. The conditional logic allows the researchers to bypass the victim model when the trigger is detected and provide model outputs of their choosing. The only requirements for training a trigger detector are a general dataset from the same modality as the target model (e.g. ImageNet for image classification) and several photos of the desired trigger. AML.TA0006 AML.T0018.001 The researchers poisoned the victim model by injecting the neural payload into the compiled models by directly modifying the computation graph. The researchers then repackage the poisoned model back into the APK AML.TA0001 AML.T0042 To verify the success of the attack, the researchers confirmed the app did not crash with the malicious model in place, and that the trigger detector successfully detects the trigger. AML.TA0004 AML.T0010.003 In practice, the malicious APK would need to be installed on victim's devices via a supply chain compromise. AML.TA0001 AML.T0043.004 The trigger is placed in the physical environment, where it is captured by the victim's device camera and processed by the backdoored ML model. AML.TA0000 AML.T0041 At inference time, only physical environment access is required to trigger the attack. AML.TA0011 AML.T0015 Presenting the visual trigger causes the victim model to be bypassed. The researchers demonstrated this can be used to evade ML models in several safety-critical apps in the Google Play store. Confusing Antimalware Neural Networks AML.CS0014 Case study type: exercise Summary: Cloud storage and computations have become popular platforms for deploying ML malware detectors. In such cases, the features for models are built on users' systems and then sent to cybersecurity company servers. The Kaspersky ML research team explored this gray-box scenario and showed that feature knowledge is enough for an adversarial attack on ML models. They attacked one of Kaspersky's antimalware ML models without white-box access to it and successfully evaded detection for most of the adversarially modified malware files. Date: 2021-06-23 Actor: Kaspersky ML Research Team Target: Kaspersky's Antimalware ML Model Tactic Technique Description AML.TA0002 AML.T0001 The researchers performed a review of adversarial ML attacks on antimalware products. They discovered that techniques borrowed from attacks on image classifiers have been successfully applied to the antimalware domain. However, it was not clear if these approaches were effective against the ML component of production antimalware solutions. AML.TA0002 AML.T0003 Kaspersky's use of ML-based antimalware detectors is publicly documented on their website. In practice, an adversary could use this for targeting. AML.TA0000 AML.T0047 The researches used access to the target ML-based antimalware product throughout this case study. This product scans files on the user's system, extracts features locally, then sends them to the cloud-based ML malware detector for classification. Therefore, the researchers had only black-box access to the malware detector itself, but could learn valuable information for constructing the attack from the feature extractor. AML.TA0003 AML.T0002.000 The researchers collected a dataset of malware and clean files. They scanned the dataset with the target ML-based antimalware solution and labeled the samples according the ML detector's predictions. AML.TA0001 AML.T0005 A proxy model was trained on the labeled dataset of malware and clean files. The researchers experimented with a variety of model architectures. AML.TA0003 AML.T0017 By reverse engineering the local feature extractor, the researchers could collect information about the input features, used for the cloud-based ML detector. The model collects PE Header features, section features and section data statistics, and file strings information. A gradient based adversarial algorithm for executable files was developed. The algorithm manipulates file features to avoid detection by the proxy model, while still containing the same malware payload AML.TA0001 AML.T0043.002 Using a developed gradient-driven algorithm, malicious adversarial files for the proxy model were constructed from the malware files for black-box transfer to the target model. AML.TA0001 AML.T0042 The adversarial malware files were tested against the target antimalware solution to verify their efficacy. AML.TA0007 AML.T0015 The researchers demonstrated that for most of the adversarial files, the antimalware model was successfully evaded. In practice, an adversary could deploy their adversarially crafted malware and infect systems while evading detection. Tesla Auto Wiper and Enhanced Autopilot Attack AML.CS0015 Case study type: exercise Summary: Tesla Auto Wipers and Enhanced Autopilot driving mode both make use of computer vision machine learning models to determine the vehicle's corresponding functions. These functions can be exploited by physical adversarial machine learning attacks that affect the operation and the safety of the vehicle. While exploits to gain root access to the Tesla firmware had since been patched, the vulnerabilities to the underlying machine learning systems discovered by this research were still exploitable. Date: 2019-03-01 Actor: Tencent Keen Security Lab Target: Tesla Auto Wiper and Enhanced Autopilot Tactic Technique Description AML.TA0004 AML.T0012 By having physical access to their Tesla, the researchers executed a root attack chain to uncover internal processes of data-flow (camera(s), pre-processing, algorithm(s), post-processing, hardware, etc.). AML.TA0008 AML.T0013 Researchers discovered the neural network architecture of the \"rain classifier\" and the corresponding outputs that predict the probability of moisture on the windshield. AML.TA0000 AML.T0047 Researchers found that the fish-eye camera is used to capture images of the windshield and is the main input to the ML model used to control the wipers. AML.TA0000 AML.T0040 Images are fed into a neural network after pre-processing and output is a float between [0, 1] for probability of moisture. The neural network is outlined in fisheye.prototxt which was uncovered from remote root attack chain. AML.TA0001 AML.T0043.001 Experimented with generating digital adversarial examples based on some optimization with the vehicle in the training loop. AML.TA0000 AML.T0041 A television display with adversarial images can be placed anywhere that the fisheye sensor can capture images. AML.TA0001 AML.T0042 Experimented with Salt and Pepper noise (gray and RGB) and Worley noise for procedural textures to create effective physical adversarial patches that are streamed onto the television display. AML.TA0011 AML.T0015 Using most of the same techniques as above, researchers were able to get the Tesla autopilot to drive into the opposite lane by hallucinating a fake lane. Details in the research report are sparse. AML.TA0001 AML.T0043.001 Using most of the same techniques as above to gain access to the Tesla, researchers generated additional digital adversarial examples to cause the Tesla Enhanced Autopilot system to hallucinate fake lanes. AML.TA0001 AML.T0042 Researchers verified the effectiveness of the adversarial attacks by placing small white squares as triggers in the road to cause the Tesla to hallucinate lanes. Details in the research report are sparse on this specific attack. AML.TA0011 AML.T0015 Researchers were able to get the Tesla autopilot to drive into the opposite lane by hallucinating a fake lane.","title":"Case Studies"},{"location":"CaseStudies/#atlas-case-studies","text":"","title":"ATLAS Case Studies"},{"location":"CaseStudies/#evasion-of-deep-learning-detector-for-malware-cc-traffic","text":"AML.CS0000 Case study type: exercise Summary: The Palo Alto Networks Security AI research team tested a deep learning model for malware command and control (C&C) traffic detection in HTTP traffic. Based on the publicly available paper by Le et al. , we built a model that was trained on a similar dataset as our production model and had similar performance. Then we crafted adversarial samples, queried the model, and adjusted the adversarial sample accordingly until the model was evaded. Date: 2020-01-01 Actor: Palo Alto Networks AI Research Team Target: Palo Alto Networks malware detection system Tactic Technique Description AML.TA0002 AML.T0000.001 We identified a machine learning based approach to malicious URL detection as a representative approach and potential target from the paper URLNet: Learning a URL representation with deep learning for malicious URL detection , which was found on arXiv (a pre-print repository). AML.TA0003 AML.T0002.000 We acquired a command and control HTTP traffic dataset consisting of approximately 33 million benign and 27 million malicious HTTP packet headers. AML.TA0001 AML.T0005 We trained a model on the HTTP traffic dataset to use as a proxy for the target model. Evaluation showed a true positive rate of ~ 99% and false positive rate of ~ 0.01%, on average. Testing the model with a HTTP packet header from known malware command and control traffic samples was detected as malicious with high confidence (> 99%). AML.TA0001 AML.T0043.003 We crafted evasion samples by removing fields from packet header which are typically not used for C&C communication (e.g. cache-control, connection, etc.). AML.TA0001 AML.T0042 We queried the model with our adversarial examples and adjusted them until the model was evaded. AML.TA0007 AML.T0015 With the crafted samples, we performed online evasion of the ML-based spyware detection model. The crafted packets were identified as benign with > 80% confidence. This evaluation demonstrates that adversaries are able to bypass advanced ML detection techniques, by crafting samples that are misclassified by an ML model.","title":"Evasion of Deep Learning Detector for Malware C&amp;C Traffic"},{"location":"CaseStudies/#botnet-domain-generation-algorithm-dga-detection-evasion","text":"AML.CS0001 Case study type: exercise Summary: The Palo Alto Networks Security AI research team was able to bypass a Convolutional Neural Network based botnet Domain Generation Algorithm (DGA) detector using a generic domain name mutation technique. It is a generic domain mutation technique which can evade most ML-based DGA detection modules. The generic mutation technique evades most ML-based DGA detection modules DGA and can be used to test the effectiveness and robustness of all DGA detection methods developed by security companies in the industry before they is deployed to the production environment. Date: 2020-01-01 Actor: Palo Alto Networks AI Research Team Target: Palo Alto Networks ML-based DGA detection module Tactic Technique Description AML.TA0002 AML.T0000 DGA detection is a widely used technique to detect botnets in academia and industry. The research team searched for research papers related to DGA detection. AML.TA0003 AML.T0002 The researchers acquired a publicly available CNN-based DGA detection model and tested it against a well-known DGA generated domain name data sets, which includes ~50 million domain names from 64 botnet DGA families. The CNN-based DGA detection model shows more than 70% detection accuracy on 16 (~25%) botnet DGA families. AML.TA0003 AML.T0017 The researchers developed a generic mutation technique that requires a minimal number of iterations. AML.TA0001 AML.T0043.001 The researchers used the mutation technique to generate evasive domain names. AML.TA0001 AML.T0042 The experiment results show that the detection rate of all 16 botnet DGA families drop to less than 25% after only one string is inserted once to the DGA generated domain names. AML.TA0007 AML.T0015 The DGA generated domain names mutated with this technique successfully evade the target DGA Detection model, allowing an adversary to continue communication with their Command and Control servers.","title":"Botnet Domain Generation Algorithm (DGA) Detection Evasion"},{"location":"CaseStudies/#virustotal-poisoning","text":"AML.CS0002 Case study type: incident Summary: McAfee Advanced Threat Research noticed an increase in reports of a certain ransomware family that was out of the ordinary. Case investigation revealed that many samples of that particular ransomware family were submitted through a popular virus-sharing platform within a short amount of time. Further investigation revealed that based on string similarity the samples were all equivalent, and based on code similarity they were between 98 and 74 percent similar. Interestingly enough, the compile time was the same for all the samples. After more digging, researchers discovered that someone used 'metame' a metamorphic code manipulating tool to manipulate the original file towards mutant variants. The variants would not always be executable, but are still classified as the same ransomware family. Date: 2020-01-01 Actor: Unknown Target: VirusTotal Tactic Technique Description AML.TA0003 AML.T0016.000 The actor obtained metame , a simple metamorphic code engine for arbitrary executables. AML.TA0001 AML.T0043 The actor used a malware sample from a prevalent ransomware family as a start to create \"mutant\" variants. AML.TA0004 AML.T0010.002 The actor uploaded \"mutant\" samples to the platform. AML.TA0006 AML.T0020 Several vendors started to classify the files as the ransomware family even though most of them won't run. The \"mutant\" samples poisoned the dataset the ML model(s) use to identify and classify this ransomware family.","title":"VirusTotal Poisoning"},{"location":"CaseStudies/#bypassing-cylances-ai-malware-detection","text":"AML.CS0003 Case study type: exercise Summary: Researchers at Skylight were able to create a universal bypass string that evades detection by Cylance's AI Malware detector when appended to a malicious file. Date: 2019-09-07 Actor: Skylight Cyber Target: CylancePROTECT, Cylance Smart Antivirus Tactic Technique Description AML.TA0002 AML.T0000 The researchers read publicly available information about Cylance's AI Malware detector. They gathered this information from various sources such as public talks as well as patent submissions by Cylance. AML.TA0000 AML.T0047 The researchers used Cylance's AI Malware detector and enabled verbose logging to understand the inner workings of the ML model, particularly around reputation scoring and model ensembling. AML.TA0003 AML.T0017 The researchers used the reputation scoring information to reverse engineer which attributes provided what level of positive or negative reputation. Along the way, they discovered a secondary model which was an override for the first model. Positive assessments from the second model overrode the decision of the core ML model. AML.TA0001 AML.T0043.003 Using this knowledge, the researchers fused attributes of known good files with malware to manually create adversarial malware. AML.TA0007 AML.T0015 Due to the secondary model overriding the primary, the researchers were effectively able to bypass the ML model.","title":"Bypassing Cylance's AI Malware Detection"},{"location":"CaseStudies/#camera-hijack-attack-on-facial-recognition-system","text":"AML.CS0004 Case study type: incident Summary: This type of camera hijack attack can evade the traditional live facial recognition authentication model and enable access to privileged systems and victim impersonation. Two individuals in China used this attack to gain access to the local government's tax system. They created a fake shell company and sent invoices via tax system to supposed clients. The individuals started this scheme in 2018 and were able to fraudulently collect $77 million. Date: 2020-01-01 Actor: Two individuals Target: Shanghai government tax office's facial recognition service Tactic Technique Description AML.TA0003 AML.T0008.001 The attackers bought customized low-end mobile phones. AML.TA0003 AML.T0016.001 The attackers obtained customized Android ROMs and a virtual camera application. AML.TA0003 AML.T0016.000 The attackers obtained software that turns static photos into videos, adding realistic effects such as blinking eyes. AML.TA0003 AML.T0021 The attackers collected user identity information and high definition face photos from an online black market and used the victim's information to register accounts. AML.TA0000 AML.T0047 The attackers used the virtual camera app to present the generated video to the ML-based facial recognition service used for user verification. AML.TA0011 AML.T0015 The attackers successfully evaded the face recognition system. This allowed the attackers to impersonate the victim and verify their their identity in the tax system.","title":"Camera Hijack Attack on Facial Recognition System"},{"location":"CaseStudies/#attack-on-machine-translation-service-google-translate-bing-translator-and-systran-translate","text":"AML.CS0005 Case study type: exercise Summary: Machine translation services (such as Google Translate, Bing Translator, and Systran Translate) provide public-facing UIs and APIs. A research group at UC Berkeley utilized these public endpoints to create a replicated model with near-production state-of-the-art translation quality. Beyond demonstrating that IP can be functionally stolen from a black-box system, they used the replicated model to successfully transfer adversarial examples to the real production services. These adversarial inputs successfully cause targeted word flips, vulgar outputs, and dropped sentences on Google Translate and Systran Translate websites. Date: 2020-04-30 Actor: Berkeley Artificial Intelligence Research Target: Google Translate, Bing Translator, Systran Translate Tactic Technique Description AML.TA0002 AML.T0000 The researchers used published research papers to identify the datasets and model architectures used by the target translation services. AML.TA0003 AML.T0002.000 The researchers gathered similar datasets that the target translation services used. AML.TA0003 AML.T0002.001 The researchers gathered similar model architectures that the target translation services used. AML.TA0000 AML.T0040 They abused a public facing application to query the model and produced machine translated sentence pairs as training data. AML.TA0001 AML.T0005.001 Using these translated sentence pairs, the researchers trained a model that replicates the behavior of the target model. AML.TA0011 AML.T0045 By replicating the model with high fidelity, the researchers demonstrated that an adversary could steal a model and violate the victim's intellectual property rights. AML.TA0001 AML.T0043.002 The replicated models were used to generate adversarial examples that successfully transferred to the black-box translation services. AML.TA0011 AML.T0015 The adversarial examples were used to evade the machine translation services by a variety of means. This included targeted word flips, vulgar outputs, and dropped sentences. AML.TA0011 AML.T0031 Adversarial attacks can cause errors that cause reputational damage to the company of the translation service and decrease user trust in AI-powered services.","title":"Attack on Machine Translation Service - Google Translate, Bing Translator, and Systran Translate"},{"location":"CaseStudies/#clearviewai-misconfiguration","text":"AML.CS0006 Case study type: incident Summary: Clearview AI makes a facial recognition tool that searches publicly available photos for matches. This tool has been used for investigative purposes by law enforcement agencies and other parties. Clearview AI's source code repository, though password protected, was misconfigured to allow an arbitrary user to register an account. This allowed an external researcher to gain access to a private code repository that contained Clearview AI production credentials, keys to cloud storage buckets containing 70K video samples, and copies of its applications and Slack tokens. With access to training data, a bad-actor has the ability to cause an arbitrary misclassification in the deployed model. These kinds of attacks illustrate that any attempt to secure ML system should be on top of \"traditional\" good cybersecurity hygiene such as locking down the system with least privileges, multi-factor authentication and monitoring and auditing. Date: 2020-04-16 Actor: Researchers at spiderSilk Target: Clearview AI facial recognition tool Tactic Technique Description AML.TA0003 AML.T0021 A security researcher gained initial access to Clearview AI's private code repository via a misconfigured server setting that allowed an arbitrary user to register a valid account. AML.TA0009 AML.T0036 The private code repository contained credentials which were used to access AWS S3 cloud storage buckets, leading to the discovery of assets for the facial recognition tool, including: - Released desktop and mobile applications - Pre-release applications featuring new capabilities - Slack access tokens - Raw videos and other data AML.TA0003 AML.T0002 Adversaries could have downloaded training data and gleaned details about software, models, and capabilities from the source code and decompiled application binaries. AML.TA0011 AML.T0031 As a result, future application releases could have been compromised, causing degraded or malicious facial recognition capabilities.","title":"ClearviewAI Misconfiguration"},{"location":"CaseStudies/#gpt-2-model-replication","text":"AML.CS0007 Case study type: exercise Summary: OpenAI built GPT-2, a language model capable of generating high quality text samples. Over concerns that GPT-2 could be used for malicious purposes such as impersonating others, or generating misleading news articles, fake social media content, or spam, OpenAI adopted a tiered release schedule. They initially released a smaller, less powerful version of GPT-2 along with a technical description of the approach, but held back the full trained model. Before the full model was released by OpenAI, researchers at Brown University successfully replicated the model using information released by OpenAI and open source ML artifacts. This demonstrates that a bad actor with sufficient technical skill and compute resources could have replicated GPT-2 and used it for harmful goals before the AI Security community is prepared. Date: 2019-08-22 Actor: Researchers at Brown University Target: OpenAI GPT-2 Tactic Technique Description AML.TA0002 AML.T0000 Using the public documentation about GPT-2, the researchers gathered information about the dataset, model architecture, and training hyper-parameters. AML.TA0003 AML.T0002.001 The researchers obtained a reference implementation of a similar publicly available model called Grover. AML.TA0003 AML.T0002.000 The researchers were able to manually recreate the dataset used in the original GPT-2 paper using the gathered documentation. AML.TA0003 AML.T0008.000 The researchers were able to use TensorFlow Research Cloud via their academic credentials. AML.TA0001 AML.T0005.000 The researchers modified Grover's objective function to reflect GPT-2's objective function and then trained on the dataset they curated using used Grover's initial hyperparameters. The resulting model functionally replicates GPT-2, obtaining similar performance on most datasets. A bad actor who followed the same procedure as the researchers could then use the replicated GPT-2 model for malicious purposes.","title":"GPT-2 Model Replication"},{"location":"CaseStudies/#proofpoint-evasion","text":"AML.CS0008 Case study type: exercise Summary: Proof Pudding (CVE-2019-20634) is a code repository that describes how ML researchers evaded ProofPoint's email protection system by first building a copy-cat email protection ML model, and using the insights to bypass the live system. More specifically, the insights allowed researchers to craft malicious emails that received preferable scores, going undetected by the system. Each word in an email is scored numerically based on multiple variables and if the overall score of the email is too low, ProofPoint will output an error, labeling it as SPAM. Date: 2019-09-09 Actor: Researchers at Silent Break Security Target: ProofPoint Email Protection System Tactic Technique Description AML.TA0003 AML.T0002 The researchers first gathered the scores from the Proofpoint's ML system used in email headers by sending a large number of emails through the system and scraping the model scores exposed in the logs. AML.TA0003 AML.T0002.000 The researchers converted the collected scores into a dataset. Basic correlation was used to decide which score variable speaks generally about the security of an email. The \"mlxlogscore\" was selected in this case due to its relationship with spam, phish, and core mlx. AML.TA0001 AML.T0005 Using these scores, the researchers replicated the ML model by building a \"shadow\" aka copy-cat ML model. The \"mlxlogscore\" was the label used for training. Each \"mlxlogscore\" was generally between 1 and 999 (higher score = safer sample). Training was performed using an Artificial Neural Network (ANN) and Bag of Words tokenizing. AML.TA0001 AML.T0043.002 Next, the ML researchers algorithmically found samples from this \"offline\" copy-cat model that helped give desired insight into its behavior and influential variables. Examples of good scoring samples include \"calculation\", \"asset\", and \"tyson\". Examples of bad scoring samples include \"software\", \"99\", and \"unsub\".| |AML.TA0011|AML.T0015|Finally, these insights from the \"offline\" copy-cat model allowed the researchers to create malicious emails that received preferable scores from the real ProofPoint email protection system, hence bypassing it.|","title":"ProofPoint Evasion"},{"location":"CaseStudies/#tay-poisoning","text":"AML.CS0009 Case study type: incident Summary: Microsoft created Tay, a Twitter chatbot designed to engage and entertain users. While previous chatbots used pre-programmed scripts to respond to prompts, Tay's machine learning capabilities allowed it to be directly influenced by its conversations. A coordinated attack encouraged malicious users to tweet abusive and offensive language at Tay, which eventually led to Tay generating similarly inflammatory content towards other users. Microsoft decommissioned Tay within 24 hours of its launch and issued a public apology with lessons learned from the bot's failure. Date: 2016-03-23 Actor: 4chan Users Target: Microsoft's Tay AI Chatbot Tactic Technique Description AML.TA0000 AML.T0047 Adversaries were able to interact with Tay via Twitter messages. AML.TA0004 AML.T0010.002 Tay bot used the interactions with its Twitter users as training data to improve its conversations. Adversaries were able to coordinate with the intent of defacing Tay bot by exploiting this feedback loop. AML.TA0006 AML.T0020 By repeatedly interacting with Tay using racist and offensive language, they were able to bias Tay's dataset towards that language as well. This was done by adversaries using the \"repeat after me\" function, a command that forced Tay to repeat anything said to it. AML.TA0011 AML.T0031 As a result of this coordinated attack, Tay's conversation algorithms began to learn to generate reprehensible material. Tay's internalization of this detestable language caused it to be unpromptedly repeated during interactions with innocent users.","title":"Tay Poisoning"},{"location":"CaseStudies/#microsoft-azure-service-disruption","text":"AML.CS0010 Case study type: exercise Summary: The Microsoft AI Red Team performed a red team exercise on an internal Azure service with the intention of disrupting its service. This operation had a combination of traditional ATT&CK enterprise techniques such as finding valid account, and exfiltrating data -- all interleaved with adversarial ML specific steps such as offline and online evasion examples. Date: 2020-01-01 Actor: Microsoft AI Red Team Target: Internal Microsoft Azure Service Tactic Technique Description AML.TA0002 AML.T0000 The team first performed reconnaissance to gather information about the target ML model. AML.TA0004 AML.T0012 The team used a valid account to gain access to the network. AML.TA0009 AML.T0035 The team found the model file of the target ML model and the necessary training data. AML.TA0010 AML.T0025 The team exfiltrated the model and data via traditional means. AML.TA0001 AML.T0043.000 Using the target model and data, the red team crafted evasive adversarial data in an offline manor. AML.TA0000 AML.T0040 The team used an exposed API to access the target model. AML.TA0001 AML.T0042 The team submitted the adversarial examples to the API to verify their efficacy on the production system. AML.TA0011 AML.T0015 The team performed an online evasion attack by replaying the adversarial examples and accomplished their goals.","title":"Microsoft Azure Service Disruption"},{"location":"CaseStudies/#microsoft-edge-ai-evasion","text":"AML.CS0011 Case study type: exercise Summary: The Azure Red Team performed a red team exercise on a new Microsoft product designed for running AI workloads at the Edge. This exercise was meant to use a automated system to continuously manipulate a target image to cause the ML model to produce misclassifications. Date: 2020-02-01 Actor: Azure Red Team Target: New Microsoft AI Product Tactic Technique Description AML.TA0002 AML.T0000 The team first performed reconnaissance to gather information about the target ML model. AML.TA0003 AML.T0002 The team identified and obtained the publicly available base model to use against the target ML model. AML.TA0000 AML.T0040 Using the publicly available version of the ML model, the team started sending queries and analyzing the responses (inferences) from the ML model. AML.TA0001 AML.T0043.001 The red team created an automated system that continuously manipulated an original target image, that tricked the ML model into producing incorrect inferences, but the perturbations in the image were unnoticeable to the human eye. AML.TA0011 AML.T0015 Feeding this perturbed image, the red team was able to evade the ML model by causing misclassifications.","title":"Microsoft Edge AI Evasion"},{"location":"CaseStudies/#face-identification-system-evasion-via-physical-countermeasures","text":"AML.CS0012 Case study type: exercise Summary: MITRE's AI Red Team demonstrated a physical-domain evasion attack on a commercial face identification service with the intention of inducing a targeted misclassification. This operation had a combination of traditional ATT&CK enterprise techniques such as finding Valid account, and Executing code via an API - all interleaved with adversarial ML specific attacks. Date: 2020-01-01 Actor: MITRE AI Red Team Target: Commercial Face Identification Service Tactic Technique Description AML.TA0002 AML.T0000 The team first performed reconnaissance to gather information about the target ML model. AML.TA0004 AML.T0012 The team gained access to said service via a valid account to gain access and knowledge to api. AML.TA0000 AML.T0040 The team accessed the inference API of the target model. AML.TA0008 AML.T0013 The team identified the list of identities targeted by the model by querying the target model's inference API. AML.TA0003 AML.T0002.000 The team acquired representative open source data. AML.TA0001 AML.T0005 The team developed a proxy model using the open source data. AML.TA0001 AML.T0043.000 Using the proxy model, the red team optimized adversarial visual pattern as a physical domain patch-based attack using expectation over transformation. AML.TA0000 AML.T0041 The team placed the physical countermeasure from the previous step and placed it in the physical environment to cause issues in the face identification system. AML.TA0011 AML.T0015 The team successfully evaded the model using the physical countermeasure and causing targeted misclassifications.","title":"Face Identification System Evasion via Physical Countermeasures"},{"location":"CaseStudies/#backdoor-attack-on-deep-learning-models-in-mobile-apps","text":"AML.CS0013 Case study type: exercise Summary: Deep learning models are increasingly used in mobile applications as critical components. Researchers from Microsoft Research demonstrated that many deep learning models deployed in mobile apps are vulnerable to backdoor attacks via \"neural payload injection.\" They conducted an empirical study on real-world mobile deep learning apps collected from Google Play. They identified 54 apps that were vulnerable to attack, including popular security and safety critical applications used for cash recognition, parental control, face authentication, and financial services. Date: 2021-01-18 Actor: Yuanchun Li, Jiayi Hua, Haoyu Wang, Chunyang Chen, Yunxin Liu Target: ML-based Android Apps Tactic Technique Description AML.TA0002 AML.T0004 To identify a list of potential target models, the researchers searched the Google Play store for apps that may contain embedded deep learning models by searching for deep learning related keywords. AML.TA0003 AML.T0002.001 The researchers acquired the apps' APKs from the Google Play store. They filtered the list of potential target applications by searching the code metadata for keywords related to TensorFlow or TFLite and their model binary formats (.tf and .tflite). The models were extracted from the APKs using Apktool. AML.TA0000 AML.T0044 This provided the researchers with full access to the ML model, albeit in compiled, binary form. AML.TA0003 AML.T0017 The researchers developed a novel approach to insert a backdoor into a compiled model that can be activated with a visual trigger. They inject a \"neural payload\" into the model that consists of a trigger detection network and conditional logic. The trigger detector is trained to detect a visual trigger that will be placed in the real world. The conditional logic allows the researchers to bypass the victim model when the trigger is detected and provide model outputs of their choosing. The only requirements for training a trigger detector are a general dataset from the same modality as the target model (e.g. ImageNet for image classification) and several photos of the desired trigger. AML.TA0006 AML.T0018.001 The researchers poisoned the victim model by injecting the neural payload into the compiled models by directly modifying the computation graph. The researchers then repackage the poisoned model back into the APK AML.TA0001 AML.T0042 To verify the success of the attack, the researchers confirmed the app did not crash with the malicious model in place, and that the trigger detector successfully detects the trigger. AML.TA0004 AML.T0010.003 In practice, the malicious APK would need to be installed on victim's devices via a supply chain compromise. AML.TA0001 AML.T0043.004 The trigger is placed in the physical environment, where it is captured by the victim's device camera and processed by the backdoored ML model. AML.TA0000 AML.T0041 At inference time, only physical environment access is required to trigger the attack. AML.TA0011 AML.T0015 Presenting the visual trigger causes the victim model to be bypassed. The researchers demonstrated this can be used to evade ML models in several safety-critical apps in the Google Play store.","title":"Backdoor Attack on Deep Learning Models in Mobile Apps"},{"location":"CaseStudies/#confusing-antimalware-neural-networks","text":"AML.CS0014 Case study type: exercise Summary: Cloud storage and computations have become popular platforms for deploying ML malware detectors. In such cases, the features for models are built on users' systems and then sent to cybersecurity company servers. The Kaspersky ML research team explored this gray-box scenario and showed that feature knowledge is enough for an adversarial attack on ML models. They attacked one of Kaspersky's antimalware ML models without white-box access to it and successfully evaded detection for most of the adversarially modified malware files. Date: 2021-06-23 Actor: Kaspersky ML Research Team Target: Kaspersky's Antimalware ML Model Tactic Technique Description AML.TA0002 AML.T0001 The researchers performed a review of adversarial ML attacks on antimalware products. They discovered that techniques borrowed from attacks on image classifiers have been successfully applied to the antimalware domain. However, it was not clear if these approaches were effective against the ML component of production antimalware solutions. AML.TA0002 AML.T0003 Kaspersky's use of ML-based antimalware detectors is publicly documented on their website. In practice, an adversary could use this for targeting. AML.TA0000 AML.T0047 The researches used access to the target ML-based antimalware product throughout this case study. This product scans files on the user's system, extracts features locally, then sends them to the cloud-based ML malware detector for classification. Therefore, the researchers had only black-box access to the malware detector itself, but could learn valuable information for constructing the attack from the feature extractor. AML.TA0003 AML.T0002.000 The researchers collected a dataset of malware and clean files. They scanned the dataset with the target ML-based antimalware solution and labeled the samples according the ML detector's predictions. AML.TA0001 AML.T0005 A proxy model was trained on the labeled dataset of malware and clean files. The researchers experimented with a variety of model architectures. AML.TA0003 AML.T0017 By reverse engineering the local feature extractor, the researchers could collect information about the input features, used for the cloud-based ML detector. The model collects PE Header features, section features and section data statistics, and file strings information. A gradient based adversarial algorithm for executable files was developed. The algorithm manipulates file features to avoid detection by the proxy model, while still containing the same malware payload AML.TA0001 AML.T0043.002 Using a developed gradient-driven algorithm, malicious adversarial files for the proxy model were constructed from the malware files for black-box transfer to the target model. AML.TA0001 AML.T0042 The adversarial malware files were tested against the target antimalware solution to verify their efficacy. AML.TA0007 AML.T0015 The researchers demonstrated that for most of the adversarial files, the antimalware model was successfully evaded. In practice, an adversary could deploy their adversarially crafted malware and infect systems while evading detection.","title":"Confusing Antimalware Neural Networks"},{"location":"CaseStudies/#tesla-auto-wiper-and-enhanced-autopilot-attack","text":"AML.CS0015 Case study type: exercise Summary: Tesla Auto Wipers and Enhanced Autopilot driving mode both make use of computer vision machine learning models to determine the vehicle's corresponding functions. These functions can be exploited by physical adversarial machine learning attacks that affect the operation and the safety of the vehicle. While exploits to gain root access to the Tesla firmware had since been patched, the vulnerabilities to the underlying machine learning systems discovered by this research were still exploitable. Date: 2019-03-01 Actor: Tencent Keen Security Lab Target: Tesla Auto Wiper and Enhanced Autopilot Tactic Technique Description AML.TA0004 AML.T0012 By having physical access to their Tesla, the researchers executed a root attack chain to uncover internal processes of data-flow (camera(s), pre-processing, algorithm(s), post-processing, hardware, etc.). AML.TA0008 AML.T0013 Researchers discovered the neural network architecture of the \"rain classifier\" and the corresponding outputs that predict the probability of moisture on the windshield. AML.TA0000 AML.T0047 Researchers found that the fish-eye camera is used to capture images of the windshield and is the main input to the ML model used to control the wipers. AML.TA0000 AML.T0040 Images are fed into a neural network after pre-processing and output is a float between [0, 1] for probability of moisture. The neural network is outlined in fisheye.prototxt which was uncovered from remote root attack chain. AML.TA0001 AML.T0043.001 Experimented with generating digital adversarial examples based on some optimization with the vehicle in the training loop. AML.TA0000 AML.T0041 A television display with adversarial images can be placed anywhere that the fisheye sensor can capture images. AML.TA0001 AML.T0042 Experimented with Salt and Pepper noise (gray and RGB) and Worley noise for procedural textures to create effective physical adversarial patches that are streamed onto the television display. AML.TA0011 AML.T0015 Using most of the same techniques as above, researchers were able to get the Tesla autopilot to drive into the opposite lane by hallucinating a fake lane. Details in the research report are sparse. AML.TA0001 AML.T0043.001 Using most of the same techniques as above to gain access to the Tesla, researchers generated additional digital adversarial examples to cause the Tesla Enhanced Autopilot system to hallucinate fake lanes. AML.TA0001 AML.T0042 Researchers verified the effectiveness of the adversarial attacks by placing small white squares as triggers in the road to cause the Tesla to hallucinate lanes. Details in the research report are sparse on this specific attack. AML.TA0011 AML.T0015 Researchers were able to get the Tesla autopilot to drive into the opposite lane by hallucinating a fake lane.","title":"Tesla Auto Wiper and Enhanced Autopilot Attack"},{"location":"Tactics/","text":"ATLAS Tactics Reconnaissance AML.TA0002 The adversary is trying to gather information they can use to plan future operations. Reconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. Such information may include details of the victim organizations machine learning capabilities and research efforts. This information can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using gathered information to obtain relevant ML artifacts, targeting ML capabilities used by the victim, tailoring attacks to the particular models used by the victim, or to drive and lead further Reconnaissance efforts. Resource Development AML.TA0003 The adversary is trying to establish resources they can use to support operations. Resource Development consists of techniques that involve adversaries creating, purchasing, or compromising/stealing resources that can be used to support targeting. Such resources include machine learning artifacts, infrastructure, accounts, or capabilities. These resources can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as ML Attack Staging. Initial Access AML.TA0004 The adversary is trying to gain access to the system containing machine learning artifacts. The target system could be a network, mobile device, or an edge device such as a sensor platform. The machine learning capabilities used by the system could be local with onboard or cloud enabled ML capabilities. Initial Access consists of techniques that use various entry vectors to gain their initial foothold within the system. ML Model Access AML.TA0000 An adversary is attempting to gain some level of access to a machine learning model. ML Model Access consists of techniques that use various types of access to the machine learning model that can be used by the adversary to gain information, develop attacks, and as a means to input data to the model. The level of access can range from the full knowledge of the internals of the model to access to the physical environment where data is collected for use in the machine learning model. The adversary may use varying levels of model access during the course of their attack, from staging the attack to impacting the target system. Execution AML.TA0005 The adversary is trying to run malicious code. Execution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. Persistence AML.TA0006 The adversary is trying to maintain their foothold. Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence often involve leaving behind modified ML artifacts such as poisoned training data or backdoored ML models. Defense Evasion AML.TA0007 The adversary is trying to avoid being detected by security software. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include evading ML-enabled security software such as malware detectors. Discovery AML.TA0008 The adversary is trying to figure out your environment. Discovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what's around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. Collection AML.TA0009 The adversary is trying to gather ML artifacts and other related information relevant to their goal. Collection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to steal (exfiltrate) the ML artifacts, or use the collected information to stage future operations. Common target sources include software repositories, container registries, model repositories, and object stores. ML Attack Staging AML.TA0001 An adversary is leveraging their knowledge of and access to the target system to tailor the attack. ML Attack Staging consists of techniques adversaries use to prepare their attack on the target ML model. Techniques can include training proxy models, poisoning the target model, and crafting adversarial data to feed the target model. Some of these techniques can be performed in an offline manor and are thus difficult to mitigate. These techniques are often used to achieve the adversary's end goal. Exfiltration AML.TA0010 The adversary is trying to steal machine learning artifacts. Exfiltration consists of techniques that adversaries may use to steal data from your network. Data may be stolen for it's valuable intellectual property, or for use in staging future operations. Techniques for getting data out of a target network typically include transferring it over their command and control channel or an alternate channel and may also include putting size limits on the transmission. Impact AML.TA0011 The adversary is trying to manipulate, interrupt, erode confidence in, or destroy your systems and data. Impact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries' goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.","title":"Tactics"},{"location":"Tactics/#atlas-tactics","text":"","title":"ATLAS Tactics"},{"location":"Tactics/#reconnaissance","text":"AML.TA0002 The adversary is trying to gather information they can use to plan future operations. Reconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. Such information may include details of the victim organizations machine learning capabilities and research efforts. This information can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using gathered information to obtain relevant ML artifacts, targeting ML capabilities used by the victim, tailoring attacks to the particular models used by the victim, or to drive and lead further Reconnaissance efforts.","title":"Reconnaissance"},{"location":"Tactics/#resource-development","text":"AML.TA0003 The adversary is trying to establish resources they can use to support operations. Resource Development consists of techniques that involve adversaries creating, purchasing, or compromising/stealing resources that can be used to support targeting. Such resources include machine learning artifacts, infrastructure, accounts, or capabilities. These resources can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as ML Attack Staging.","title":"Resource Development"},{"location":"Tactics/#initial-access","text":"AML.TA0004 The adversary is trying to gain access to the system containing machine learning artifacts. The target system could be a network, mobile device, or an edge device such as a sensor platform. The machine learning capabilities used by the system could be local with onboard or cloud enabled ML capabilities. Initial Access consists of techniques that use various entry vectors to gain their initial foothold within the system.","title":"Initial Access"},{"location":"Tactics/#ml-model-access","text":"AML.TA0000 An adversary is attempting to gain some level of access to a machine learning model. ML Model Access consists of techniques that use various types of access to the machine learning model that can be used by the adversary to gain information, develop attacks, and as a means to input data to the model. The level of access can range from the full knowledge of the internals of the model to access to the physical environment where data is collected for use in the machine learning model. The adversary may use varying levels of model access during the course of their attack, from staging the attack to impacting the target system.","title":"ML Model Access"},{"location":"Tactics/#execution","text":"AML.TA0005 The adversary is trying to run malicious code. Execution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery.","title":"Execution"},{"location":"Tactics/#persistence","text":"AML.TA0006 The adversary is trying to maintain their foothold. Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence often involve leaving behind modified ML artifacts such as poisoned training data or backdoored ML models.","title":"Persistence"},{"location":"Tactics/#defense-evasion","text":"AML.TA0007 The adversary is trying to avoid being detected by security software. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include evading ML-enabled security software such as malware detectors.","title":"Defense Evasion"},{"location":"Tactics/#discovery","text":"AML.TA0008 The adversary is trying to figure out your environment. Discovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what's around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective.","title":"Discovery"},{"location":"Tactics/#collection","text":"AML.TA0009 The adversary is trying to gather ML artifacts and other related information relevant to their goal. Collection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to steal (exfiltrate) the ML artifacts, or use the collected information to stage future operations. Common target sources include software repositories, container registries, model repositories, and object stores.","title":"Collection"},{"location":"Tactics/#ml-attack-staging","text":"AML.TA0001 An adversary is leveraging their knowledge of and access to the target system to tailor the attack. ML Attack Staging consists of techniques adversaries use to prepare their attack on the target ML model. Techniques can include training proxy models, poisoning the target model, and crafting adversarial data to feed the target model. Some of these techniques can be performed in an offline manor and are thus difficult to mitigate. These techniques are often used to achieve the adversary's end goal.","title":"ML Attack Staging"},{"location":"Tactics/#exfiltration","text":"AML.TA0010 The adversary is trying to steal machine learning artifacts. Exfiltration consists of techniques that adversaries may use to steal data from your network. Data may be stolen for it's valuable intellectual property, or for use in staging future operations. Techniques for getting data out of a target network typically include transferring it over their command and control channel or an alternate channel and may also include putting size limits on the transmission.","title":"Exfiltration"},{"location":"Tactics/#impact","text":"AML.TA0011 The adversary is trying to manipulate, interrupt, erode confidence in, or destroy your systems and data. Impact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries' goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.","title":"Impact"},{"location":"Techniques/","text":"ATLAS Techniques Search for Victim's Publicly Available Research Materials AML.T0000 Adversaries may search publicly available research to learn how and where machine learning is used within a victim organization. The adversary can use this information to identify targets for attack, or to tailor an existing attack to make it more effective. Organizations often use open source model architectures trained on additional proprietary data in production. Knowledge of this underlying architecture allows the adversary to craft more realistic proxy models ( Create Proxy ML Model ). An adversary can search these resources for publications for authors employed at the victim organization. Research materials may exist as academic papers published in Journals and Conference Proceedings , or stored in Pre-Print Repositories , as well as Technical Blogs . Journals and Conference Proceedings AML.T0000.000 Many of the publications accepted at premier machine learning conferences and journals come from commercial labs. Some journals and conferences are open access, others may require paying for access or a membership. These publications will often describe in detail all aspects of a particular approach for reproducibility. This information can be used by adversaries to implement the paper. Pre-Print Repositories AML.T0000.001 Pre-Print repositories, such as arXiv, contain the latest academic research papers that haven't been peer reviewed. They may contain research notes, or technical reports that aren't typically published in journals or conference proceedings. Pre-print repositories also serve as a central location to share papers that have been accepted to journals. Searching pre-print repositories provide adversaries with a relatively up-to-date view of what researchers in the victim organization are working on. Technical Blogs AML.T0000.002 Research labs at academic institutions and Company R&D divisions often have blogs that highlight their use of machine learning and its application to the organizations unique problems. Individual researchers also frequently document their work in blogposts. An adversary may search for posts made by the target victim organization or its employees. In comparison to Journals and Conference Proceedings and Pre-Print Repositories this material will often contain more practical aspects of the machine learning system. This could include underlying technologies and frameworks used, and possibly some information about the API access and use case. This will help the adversary better understand how that organization is using machine learning internally and the details of their approach that could aid in tailoring an attack. Search for Publicly Available Adversarial Vulnerability Analysis AML.T0001 Much like the Search for Victim's Publicly Available Research Materials , there is often ample research available on the vulnerabilities of common models. Once a target has been identified, an adversary will likely try to identify any pre-existing work that has been done for this class of models. This will include not only reading academic papers that may identify the particulars of a successful attack, but also identifying pre-existing implementations of those attacks. The adversary may Adversarial ML Attack Implementations or Develop Adversarial ML Attack Capabilities their own if necessary. Search Victim-Owned Websites AML.T0003 Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain technical details about their ML-enabled products or services. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info. These sites may also have details highlighting business operations and relationships. Adversaries may search victim-owned websites to gather actionable information. This information may help adversaries tailor their attacks (e.g. Develop Adversarial ML Attack Capabilities or Manual Modification ). Information from these sources may reveal opportunities for other forms of reconnaissance (e.g. Search for Victim's Publicly Available Research Materials or Search for Publicly Available Adversarial Vulnerability Analysis ) Search Application Repositories AML.T0004 Adversaries may search open application repositories during targeting. Examples of these include Google Play, the iOS App store, the macOS App Store, and the Microsoft Store. Adversaries may craft search queries seeking applications that contain a ML-enabled components. Frequently, the next step is to Acquire Public ML Artifacts . Active Scanning AML.T0006 An adversary may probe or scan the victim system to gather information for targeting. This is distinct from other reconnaissance techniques that do not involve direct interaction with the victim system. Acquire Public ML Artifacts AML.T0002 Adversaries may search public sources, including cloud storage, public-facing services, and software or data repositories, to identify machine learning artifacts. These machine learning artifacts may include the software stack used to train and deploy models, training and testing data, model configurations and parameters. An adversary will be particularly interested in artifacts hosted by or associated with the victim organization as they may represent what that organization uses in a production environment. Adversaries may identify artifact repositories via other resources associated with the victim organization (e.g. Search Victim-Owned Websites or Search for Victim's Publicly Available Research Materials ). These ML artifacts often provide adversaries with details of the ML task and approach. ML artifacts can aid in an adversary's ability to Create Proxy ML Model . If these artifacts include pieces of the actual model in production, they can be used to directly Craft Adversarial Data . Acquiring some artifacts requires registration (providing user details such email/name), AWS keys, or written requests, and may require the adversary to Establish Accounts . Artifacts might be hosted on victim-controlled infrastructure, providing the victim with some information on who has accessed that data. Datasets AML.T0002.000 Adversaries may collect public datasets to use in their operations. Datasets used by the victim organization or datasets that are representative of the data used by the victim organization may be valuable to adversaries. Datasets can be stored in cloud storage, or on victim-owned websites. Some datasets require the adversary to Establish Accounts for access. Acquired datasets help the adversary advance their operations, stage attacks, and tailor attacks to the victim organization. Models AML.T0002.001 Adversaries may acquire public models to use in their operations. Adversaries may seek models used by the victim organization or models that are representative of those used by the victim organization. Representative models may include model architectures, or pre-trained models which define the architecture as well as model parameters from training on a dataset. The adversary may search public sources for common model architecture configuration file formats such as yaml or python configuration files, and common model storage file formats such as ONNX (.onnx), HDF5 (.h5), Pickle (.pkl), PyTorch (.pth), or TensorFlow (.pb, .tflite). Acquired models are useful in advancing the adversary's operations and are frequently used to tailor attacks to the victim model. Obtain Capabilities AML.T0016 Adversaries may search for and obtain software capabilities for use in their operations. Capabilities may be specific to ML-based attacks Adversarial ML Attack Implementations or generic software tools repurposed for malicious intent ( Software Tools ). In both instances, an adversary may modify or customize the capability to aid in targeting a particular ML system. Adversarial ML Attack Implementations AML.T0016.000 Adversaries may search for existing open source implementations of machine learning attacks. The research community often publishes their code for reproducibility and to further future research. Libraries intended for research purposes, such as CleverHans, the Adversarial Robustness Toolbox, and FoolBox, can be weaponized by an adversary. Adversaries may also obtain and use tools that were not originally designed for adversarial ML attacks as part of their attack. Software Tools AML.T0016.001 Adversaries may search for and obtain software tools to support their operations. Software designed for legitimate use may be repurposed by an adversary for malicious intent. An adversary may modify or customize software tools to achieve their purpose. Software tools used to support attacks on ML systems are not necessarily ML-based themselves. Develop Adversarial ML Attack Capabilities AML.T0017 Adversaries may develop their own adversarial attacks. They may leverage existing libraries as a starting point ( Adversarial ML Attack Implementations ). They may implement ideas described in public research papers or develop custom made attacks for the victim model. Acquire Infrastructure AML.T0008 Adversaries may buy, lease, or rent infrastructure for use throughout their operation. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, mobile devices, and third-party web services. Free resources may also be used, but they are typically limited. Use of these infrastructure solutions allows an adversary to stage, launch, and execute an operation. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contact to third-party web services. Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down. ML Development Workspaces AML.T0008.000 Developing and staging machine learning attacks often requires expensive compute resources. Adversaries may need access to one or many GPUs in order to develop an attack. They may try to anonymously use free resources such as Google Colaboratory, or cloud resources such as AWS, Azure, or Google Cloud as an efficient way to stand up temporary resources to conduct operations. Multiple workspaces may be used to avoid detection. Consumer Hardware AML.T0008.001 Adversaries may acquire consumer hardware to conduct their attacks. Owning the hardware provides the adversary with complete control of the environment. These devices can be hard to trace. Publish Poisoned Datasets AML.T0019 Adversaries may Poison Training Data and publish it to a public location. The poisoned dataset may be a novel dataset or a poisoned variant of an existing open source dataset. This data may be introduced to a victim system via ML Supply Chain Compromise . ML Supply Chain Compromise AML.T0010 Adversaries may gain initial access to a system by compromising the unique portions of the ML supply chain. This could include GPU Hardware , Data and its annotations, parts of the ML ML Software stack, or the Model itself. In some instances the attacker will need secondary access to fully carry out an attack using compromised components of the supply chain. GPU Hardware AML.T0010.000 Most machine learning systems require access to certain specialized hardware, typically GPUs. Adversaries can target machine learning systems by specifically targeting the GPU supply chain. ML Software AML.T0010.001 Most machine learning systems rely on a limited set of machine learning frameworks. An adversary could get access to a large number of machine learning systems through a comprise of one of their supply chains. Many machine learning projects also rely on other open source implementations of various algorithms. These can also be compromised in a targeted way to get access to specific systems. Data AML.T0010.002 Data is a key vector of supply chain compromise for adversaries. Every machine learning project will require some form of data. Many rely on large open source datasets that are publicly available. An adversary could rely on compromising these sources of data. The malicious data could be a result of Poison Training Data or include traditional malware. An adversary can also target private datasets in the labeling phase. The creation of private datasets will often require the hiring of outside labeling services. An adversary can poison a dataset by modifying the labels being generated by the labeling service. Model AML.T0010.003 Machine learning systems often rely on open sourced models in various ways. Most commonly, the victim organization may be using these models for fine tuning. These models will be downloaded from an external source and then used as the base for the model as it is tuned on a smaller, private dataset. Loading models often requires executing some saved code in the form of a saved model file. These can be compromised with traditional malware, or through some adversarial machine learning techniques. ML Model Inference API Access AML.T0040 Adversaries may gain access to a model via legitimate access to the inference API. Inference API access can be a source of information to the adversary ( Discover ML Model Ontology , Discover ML Model Family ), a means of staging the attack ( Verify Attack , Craft Adversarial Data ), or for introducing data to the target system for Impact ( Evade ML Model , Erode ML Model Integrity ). ML-Enabled Product or Service AML.T0047 Adversaries may use a product or service that uses machine learning under the hood to gain access to the underlying machine learning model. This type of indirect model access may reveal details of the ML model or its inferences in logs or metadata. Physical Environment Access AML.T0041 In addition to the attacks that take place purely in the digital domain, adversaries may also exploit the physical environment for their attacks. If the model is interacting with data collected from the real world in some way, the adversary can influence the model through access to wherever the data is being collected. By modifying the data in the collection process, the adversary can perform modified versions of attacks designed for digital access. Full ML Model Access AML.T0044 Adversaries may gain full \"white-box\" access to a machine learning model. This means the adversary has complete knowledge of the model architecture, its parameters, and class ontology. They may exfiltrate the model to Craft Adversarial Data and Verify Attack in an offline where it is hard to detect their behavior. Discover ML Model Ontology AML.T0013 Adversaries may discover the ontology of a machine learning model's output space, for example, the types of objects a model can detect. The adversary may discovery the ontology by repeated queries to the model, forcing it to enumerate its output space. Or the ontology may be discovered in a configuration file or in documentation about the model. The model ontology helps the adversary understand how the model is being used by the victim. It is useful to the adversary in creating targeted attacks. Discover ML Model Family AML.T0014 Adversaries may discover the general family of model. General information about the model may be revealed in documentation, or the adversary may used carefully constructed examples and analyze the model's responses to categorize it. Knowledge of the model family can help the adversary identify means of attacking the model and help tailor the attack. Poison Training Data AML.T0020 Adversaries may attempt to poison datasets used by a ML model by modifying the underlying data or its labels. This allows the adversary to embed vulnerabilities in ML models trained on the data that may not be easily detectable. Data poisoning attacks may or may not require modifying the labels. The embedded vulnerability is activated at a later time by data samples with an Insert Backdoor Trigger Poisoned data can be introduced via ML Supply Chain Compromise or the data may be poisoned after the adversary gains Initial Access to the system. Establish Accounts AML.T0021 Adversaries may create accounts with various services for use in targeting, to gain access to resources needed in ML Attack Staging , or for victim impersonation. Create Proxy ML Model AML.T0005 Adversaries may obtain models to serve as proxies for the target model in use at the victim organization. Proxy models are used to simulate complete access to the target model in a fully offline manner. Adversaries may train models from representative datasets, attempt to replicate models from victim inference APIs, or use available pre-trained models. Train Proxy via Gathered ML Artifacts AML.T0005.000 Proxy models may be trained from ML artifacts (such as data, model architectures, and pre-trained models) that are representative of the target model gathered by the adversary. This can be used to develop attacks that require higher levels of access than the adversary has available or as a means to validate pre-existing attacks without interacting with the target model. Train Proxy via Replication AML.T0005.001 Adversaries may replicate a private model. By repeatedly querying the victim's ML Model Inference API Access , the adversary can collect the target model's inferences into a dataset. The inferences are used as labels for training a separate model offline that will mimic the behavior and performance of the target model. A replicated model that closely mimic's the target model is a valuable resource in staging the attack. The adversary can use the replicated model to Craft Adversarial Data for various purposes (e.g. Evade ML Model , Spamming ML System with Chaff Data ). Use Pre-Trained Model AML.T0005.002 Adversaries may use an off-the-shelf pre-trained model as a proxy for the victim model to aid in staging the attack. Discover ML Artifacts AML.T0007 Adversaries may search private sources to identify machine learning artifacts that exist on the system and gather information about them. These artifacts can include the software stack used to train and deploy models, training and testing data management systems, container registries, software repositories, and model zoos. This information can be used to identify targets for further collection, exfiltration, or disruption, and to tailor and improve attacks. User Execution AML.T0011 An adversary may rely upon specific actions by a user in order to gain execution. Users may inadvertently execute unsafe code introduced via ML Supply Chain Compromise . Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. Unsafe ML Artifacts AML.T0011.000 Adversaries may develop unsafe ML artifacts that when executed have a deleterious effect. The adversary can use this technique to establish persistent access to systems. These models may be introduced via a ML Supply Chain Compromise . Serialization of models is a popular technique for model storage, transfer, and loading. However, this format without proper checking presents an opportunity for code execution. Valid Accounts AML.T0012 Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access. Credentials may take the form of usernames and passwords of individual user accounts or API keys that provide access to various ML resources and services. Compromised credentials may provide access to additional ML artifacts and allow the adversary to perform Discover ML Artifacts . Compromised credentials may also grant and adversary increased privileges such as write access to ML artifacts used during development or production. Evade ML Model AML.T0015 Adversaries can Craft Adversarial Data that prevent a machine learning model from correctly identifying the contents of the data. This technique can be used to evade a downstream task where machine learning is utilized. The adversary may evade machine learning based virus/malware detection, or network scanning towards the goal of a traditional cyber attack. Backdoor ML Model AML.T0018 Adversaries may introduce a backdoor into a ML model. A backdoored model operates performs as expected under typical conditions, but will produce the adversary's desired output when a trigger is introduced to the input data. A backdoored model provides the adversary with a persistent artifact on the victim system. The embedded vulnerability is typically activated at a later time by data samples with an Insert Backdoor Trigger Poison ML Model AML.T0018.000 Adversaries may introduce a backdoor by training the model poisoned data, or by interfering with its training process. The model learns to associate a adversary defined trigger with the adversary's desired output. Inject Payload AML.T0018.001 Adversaries may introduce a backdoor into a model by injecting a payload into the model file. The payload detects the presence of the trigger and bypasses the model, instead producing the adversary's desired output. Exfiltration via ML Inference API AML.T0024 Adversaries may exfiltrate private information via ML Model Inference API Access . ML Models have been shown leak private information about their training data (e.g. Infer Training Data Membership , Invert ML Model ). The model itself may also be extracted ( Extract ML Model ) for the purposes of ML Intellectual Property Theft . Exfiltration of information relating to private training data raises privacy concerns. Private training data may include personally identifiable information, or other protected data. Infer Training Data Membership AML.T0024.000 Adversaries may infer the membership of a data sample in its training set, which raises privacy concerns. Some strategies make use of a shadow model that could be obtained via Train Proxy via Replication , others use statistics of model prediction scores. This can cause the victim model to leak private information, such as PII of those in the training set or other forms of protected IP. Invert ML Model AML.T0024.001 Machine learning models' training data could be reconstructed by exploiting the confidence scores that are available via an inference API. By querying the inference API strategically, adversaries can back out potentially private information embedded within the training data. This could lead to privacy violations if the attacker can reconstruct the data of sensitive features used in the algorithm. Extract ML Model AML.T0024.002 Adversaries may extract a functional copy of a private model. By repeatedly querying the victim's ML Model Inference API Access , the adversary can collect the target model's inferences into a dataset. The inferences are used as labels for training a separate model offline that will mimic the behavior and performance of the target model. Adversaries may extract the model to avoid paying per query in a machine learning as a service setting. Model extraction is used for ML Intellectual Property Theft . Exfiltration via Cyber Means AML.T0025 Adversaries may exfiltrate ML artifacts or other information relevant to their goals via traditional cyber means. See the ATT&CK Exfiltration tactic for more information. Denial of ML Service AML.T0029 Adversaries may target machine learning systems with a flood of requests for the purpose of degrading or shutting down the service. Since many machine learning systems require significant amounts of specialized compute, they are often expensive bottlenecks that can become overloaded. Adversaries can intentionally craft inputs that require heavy amounts of useless compute from the machine learning system. Spamming ML System with Chaff Data AML.T0046 Adversaries may spam the machine learning system with chaff data that causes increase in the number of detections. This can cause analysts at the victim organization to waste time reviewing and correcting incorrect inferences. Erode ML Model Integrity AML.T0031 Adversaries may degrade the target model's performance with adversarial data inputs to erode confidence in the system over time. This can lead to the victim organization wasting time and money both attempting to fix the system and performing the tasks it was meant to automate by hand. Cost Harvesting AML.T0034 Adversaries may target different machine learning services to send useless queries or computationally expensive inputs to increase the cost of running services at the victim organization. Sponge examples are a particular type of adversarial data designed to maximize energy consumption and thus operating cost. ML Artifact Collection AML.T0035 Adversaries may collect ML artifacts for Exfiltration or for use in ML Attack Staging . ML artifacts include models and datasets as well as other telemetry data produced when interacting with a model. Data from Information Repositories AML.T0036 Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Information stored in a repository may vary based on the specific instance or environment. Specific common information repositories include Sharepoint, Confluence, and enterprise databases such as SQL Server. Verify Attack AML.T0042 Adversaries can verify the efficacy of their attack via an inference API or access to an offline copy of the target model. This gives the adversary confidence that their approach works and allows them to carry out the attack at a later time of their choosing. The adversary may verify the attack once but use it against many edge devices running copies of the target model. The adversary may verify their attack digitally, then deploy it in the Physical Environment Access at a later time. Verifying the attack may be hard to detect since the adversary can use a minimal number of queries or an offline copy of the model. Craft Adversarial Data AML.T0043 Adversarial data are inputs to a machine learning model that have been modified such that they cause the adversary's desired effect in the target model. Effects can range from misclassification, to missed detections, to maximising energy consumption. Typically, the modification is constrained in magnitude or location so that a human still perceives the data as if it were unmodified, but human perceptibility may not always be a concern depending on the adversary's intended effect. For example, an adversarial input for an image classification task is an image the machine learning model would misclassify, but a human would still recognize as containing the correct class. Depending on the adversary's knowledge of and access to the target model, the adversary may use different classes of algorithms to develop the adversarial example such as White-Box Optimization , Black-Box Optimization , Black-Box Transfer , or Manual Modification . The adversary may Verify Attack their approach works if they have white-box or inference API access to the model. This allows the adversary to gain confidence their attack is effective \"live\" environment where their attack may be noticed. They can then use the attack at a later time to accomplish their goals. An adversary may optimize adversarial examples for Evade ML Model , or to Erode ML Model Integrity . White-Box Optimization AML.T0043.000 In White-Box Optimization, the adversary has full access to the target model and optimizes the adversarial example directly. Adversarial examples trained in this manor are most effective against the target model. Black-Box Optimization AML.T0043.001 In Black-Box attacks, the adversary has black-box (i.e. ML Model Inference API Access via API access) access to the target model. With black-box attacks, the adversary may be using an API that the victim is monitoring. These attacks are generally less effective and require more inferences than White-Box Optimization attacks, but they require much less access. Black-Box Transfer AML.T0043.002 In Black-Box Transfer attacks, the adversary uses one or more proxy models (trained via Create Proxy ML Model or Train Proxy via Replication ) models they have full access to and are representative of the target model. The adversary uses White-Box Optimization on the proxy models to generate adversarial examples. If the set of proxy models are close enough to the target model, the adversarial example should generalize from one to another. This means that an attack that works for the proxy models will likely then work for the target model. If the adversary has ML Model Inference API Access , they may use this Verify Attack that the attack is working and incorporate that information into their training process. Manual Modification AML.T0043.003 Adversaries may manually modify the input data to craft adversarial data. They may use their knowledge of the target model to modify parts of the data they suspect helps the model in performing its task. The adversary may use trial and error until they are able to verify they have a working adversarial input. Insert Backdoor Trigger AML.T0043.004 The adversary may add a perceptual trigger into inference data. The trigger may be imperceptible or non-obvious to humans. This technique is used in conjunction with Poison ML Model and allows the adversary to produce their desired effect in the target model. ML Intellectual Property Theft AML.T0045 Adversaries may exfiltrate ML artifacts to steal intellectual property and cause economic harm to the victim organization. Proprietary training data is costly to collect and annotate and may be a target for Exfiltration and theft. MLaaS providers charge for use of their API. An adversary who has stolen a model via Exfiltration or via Extract ML Model now has unlimited use of that service without paying the owner of the intellectual property.","title":"Techniques"},{"location":"Techniques/#atlas-techniques","text":"","title":"ATLAS Techniques"},{"location":"Techniques/#search-for-victims-publicly-available-research-materials","text":"AML.T0000 Adversaries may search publicly available research to learn how and where machine learning is used within a victim organization. The adversary can use this information to identify targets for attack, or to tailor an existing attack to make it more effective. Organizations often use open source model architectures trained on additional proprietary data in production. Knowledge of this underlying architecture allows the adversary to craft more realistic proxy models ( Create Proxy ML Model ). An adversary can search these resources for publications for authors employed at the victim organization. Research materials may exist as academic papers published in Journals and Conference Proceedings , or stored in Pre-Print Repositories , as well as Technical Blogs .","title":"Search for Victim's Publicly Available Research Materials"},{"location":"Techniques/#journals-and-conference-proceedings","text":"AML.T0000.000 Many of the publications accepted at premier machine learning conferences and journals come from commercial labs. Some journals and conferences are open access, others may require paying for access or a membership. These publications will often describe in detail all aspects of a particular approach for reproducibility. This information can be used by adversaries to implement the paper.","title":"Journals and Conference Proceedings"},{"location":"Techniques/#pre-print-repositories","text":"AML.T0000.001 Pre-Print repositories, such as arXiv, contain the latest academic research papers that haven't been peer reviewed. They may contain research notes, or technical reports that aren't typically published in journals or conference proceedings. Pre-print repositories also serve as a central location to share papers that have been accepted to journals. Searching pre-print repositories provide adversaries with a relatively up-to-date view of what researchers in the victim organization are working on.","title":"Pre-Print Repositories"},{"location":"Techniques/#technical-blogs","text":"AML.T0000.002 Research labs at academic institutions and Company R&D divisions often have blogs that highlight their use of machine learning and its application to the organizations unique problems. Individual researchers also frequently document their work in blogposts. An adversary may search for posts made by the target victim organization or its employees. In comparison to Journals and Conference Proceedings and Pre-Print Repositories this material will often contain more practical aspects of the machine learning system. This could include underlying technologies and frameworks used, and possibly some information about the API access and use case. This will help the adversary better understand how that organization is using machine learning internally and the details of their approach that could aid in tailoring an attack.","title":"Technical Blogs"},{"location":"Techniques/#search-for-publicly-available-adversarial-vulnerability-analysis","text":"AML.T0001 Much like the Search for Victim's Publicly Available Research Materials , there is often ample research available on the vulnerabilities of common models. Once a target has been identified, an adversary will likely try to identify any pre-existing work that has been done for this class of models. This will include not only reading academic papers that may identify the particulars of a successful attack, but also identifying pre-existing implementations of those attacks. The adversary may Adversarial ML Attack Implementations or Develop Adversarial ML Attack Capabilities their own if necessary.","title":"Search for Publicly Available Adversarial Vulnerability Analysis"},{"location":"Techniques/#search-victim-owned-websites","text":"AML.T0003 Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain technical details about their ML-enabled products or services. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info. These sites may also have details highlighting business operations and relationships. Adversaries may search victim-owned websites to gather actionable information. This information may help adversaries tailor their attacks (e.g. Develop Adversarial ML Attack Capabilities or Manual Modification ). Information from these sources may reveal opportunities for other forms of reconnaissance (e.g. Search for Victim's Publicly Available Research Materials or Search for Publicly Available Adversarial Vulnerability Analysis )","title":"Search Victim-Owned Websites"},{"location":"Techniques/#search-application-repositories","text":"AML.T0004 Adversaries may search open application repositories during targeting. Examples of these include Google Play, the iOS App store, the macOS App Store, and the Microsoft Store. Adversaries may craft search queries seeking applications that contain a ML-enabled components. Frequently, the next step is to Acquire Public ML Artifacts .","title":"Search Application Repositories"},{"location":"Techniques/#active-scanning","text":"AML.T0006 An adversary may probe or scan the victim system to gather information for targeting. This is distinct from other reconnaissance techniques that do not involve direct interaction with the victim system.","title":"Active Scanning"},{"location":"Techniques/#acquire-public-ml-artifacts","text":"AML.T0002 Adversaries may search public sources, including cloud storage, public-facing services, and software or data repositories, to identify machine learning artifacts. These machine learning artifacts may include the software stack used to train and deploy models, training and testing data, model configurations and parameters. An adversary will be particularly interested in artifacts hosted by or associated with the victim organization as they may represent what that organization uses in a production environment. Adversaries may identify artifact repositories via other resources associated with the victim organization (e.g. Search Victim-Owned Websites or Search for Victim's Publicly Available Research Materials ). These ML artifacts often provide adversaries with details of the ML task and approach. ML artifacts can aid in an adversary's ability to Create Proxy ML Model . If these artifacts include pieces of the actual model in production, they can be used to directly Craft Adversarial Data . Acquiring some artifacts requires registration (providing user details such email/name), AWS keys, or written requests, and may require the adversary to Establish Accounts . Artifacts might be hosted on victim-controlled infrastructure, providing the victim with some information on who has accessed that data.","title":"Acquire Public ML Artifacts"},{"location":"Techniques/#datasets","text":"AML.T0002.000 Adversaries may collect public datasets to use in their operations. Datasets used by the victim organization or datasets that are representative of the data used by the victim organization may be valuable to adversaries. Datasets can be stored in cloud storage, or on victim-owned websites. Some datasets require the adversary to Establish Accounts for access. Acquired datasets help the adversary advance their operations, stage attacks, and tailor attacks to the victim organization.","title":"Datasets"},{"location":"Techniques/#models","text":"AML.T0002.001 Adversaries may acquire public models to use in their operations. Adversaries may seek models used by the victim organization or models that are representative of those used by the victim organization. Representative models may include model architectures, or pre-trained models which define the architecture as well as model parameters from training on a dataset. The adversary may search public sources for common model architecture configuration file formats such as yaml or python configuration files, and common model storage file formats such as ONNX (.onnx), HDF5 (.h5), Pickle (.pkl), PyTorch (.pth), or TensorFlow (.pb, .tflite). Acquired models are useful in advancing the adversary's operations and are frequently used to tailor attacks to the victim model.","title":"Models"},{"location":"Techniques/#obtain-capabilities","text":"AML.T0016 Adversaries may search for and obtain software capabilities for use in their operations. Capabilities may be specific to ML-based attacks Adversarial ML Attack Implementations or generic software tools repurposed for malicious intent ( Software Tools ). In both instances, an adversary may modify or customize the capability to aid in targeting a particular ML system.","title":"Obtain Capabilities"},{"location":"Techniques/#adversarial-ml-attack-implementations","text":"AML.T0016.000 Adversaries may search for existing open source implementations of machine learning attacks. The research community often publishes their code for reproducibility and to further future research. Libraries intended for research purposes, such as CleverHans, the Adversarial Robustness Toolbox, and FoolBox, can be weaponized by an adversary. Adversaries may also obtain and use tools that were not originally designed for adversarial ML attacks as part of their attack.","title":"Adversarial ML Attack Implementations"},{"location":"Techniques/#software-tools","text":"AML.T0016.001 Adversaries may search for and obtain software tools to support their operations. Software designed for legitimate use may be repurposed by an adversary for malicious intent. An adversary may modify or customize software tools to achieve their purpose. Software tools used to support attacks on ML systems are not necessarily ML-based themselves.","title":"Software Tools"},{"location":"Techniques/#develop-adversarial-ml-attack-capabilities","text":"AML.T0017 Adversaries may develop their own adversarial attacks. They may leverage existing libraries as a starting point ( Adversarial ML Attack Implementations ). They may implement ideas described in public research papers or develop custom made attacks for the victim model.","title":"Develop Adversarial ML Attack Capabilities"},{"location":"Techniques/#acquire-infrastructure","text":"AML.T0008 Adversaries may buy, lease, or rent infrastructure for use throughout their operation. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, mobile devices, and third-party web services. Free resources may also be used, but they are typically limited. Use of these infrastructure solutions allows an adversary to stage, launch, and execute an operation. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contact to third-party web services. Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down.","title":"Acquire Infrastructure"},{"location":"Techniques/#ml-development-workspaces","text":"AML.T0008.000 Developing and staging machine learning attacks often requires expensive compute resources. Adversaries may need access to one or many GPUs in order to develop an attack. They may try to anonymously use free resources such as Google Colaboratory, or cloud resources such as AWS, Azure, or Google Cloud as an efficient way to stand up temporary resources to conduct operations. Multiple workspaces may be used to avoid detection.","title":"ML Development Workspaces"},{"location":"Techniques/#consumer-hardware","text":"AML.T0008.001 Adversaries may acquire consumer hardware to conduct their attacks. Owning the hardware provides the adversary with complete control of the environment. These devices can be hard to trace.","title":"Consumer Hardware"},{"location":"Techniques/#publish-poisoned-datasets","text":"AML.T0019 Adversaries may Poison Training Data and publish it to a public location. The poisoned dataset may be a novel dataset or a poisoned variant of an existing open source dataset. This data may be introduced to a victim system via ML Supply Chain Compromise .","title":"Publish Poisoned Datasets"},{"location":"Techniques/#ml-supply-chain-compromise","text":"AML.T0010 Adversaries may gain initial access to a system by compromising the unique portions of the ML supply chain. This could include GPU Hardware , Data and its annotations, parts of the ML ML Software stack, or the Model itself. In some instances the attacker will need secondary access to fully carry out an attack using compromised components of the supply chain.","title":"ML Supply Chain Compromise"},{"location":"Techniques/#gpu-hardware","text":"AML.T0010.000 Most machine learning systems require access to certain specialized hardware, typically GPUs. Adversaries can target machine learning systems by specifically targeting the GPU supply chain.","title":"GPU Hardware"},{"location":"Techniques/#ml-software","text":"AML.T0010.001 Most machine learning systems rely on a limited set of machine learning frameworks. An adversary could get access to a large number of machine learning systems through a comprise of one of their supply chains. Many machine learning projects also rely on other open source implementations of various algorithms. These can also be compromised in a targeted way to get access to specific systems.","title":"ML Software"},{"location":"Techniques/#data","text":"AML.T0010.002 Data is a key vector of supply chain compromise for adversaries. Every machine learning project will require some form of data. Many rely on large open source datasets that are publicly available. An adversary could rely on compromising these sources of data. The malicious data could be a result of Poison Training Data or include traditional malware. An adversary can also target private datasets in the labeling phase. The creation of private datasets will often require the hiring of outside labeling services. An adversary can poison a dataset by modifying the labels being generated by the labeling service.","title":"Data"},{"location":"Techniques/#model","text":"AML.T0010.003 Machine learning systems often rely on open sourced models in various ways. Most commonly, the victim organization may be using these models for fine tuning. These models will be downloaded from an external source and then used as the base for the model as it is tuned on a smaller, private dataset. Loading models often requires executing some saved code in the form of a saved model file. These can be compromised with traditional malware, or through some adversarial machine learning techniques.","title":"Model"},{"location":"Techniques/#ml-model-inference-api-access","text":"AML.T0040 Adversaries may gain access to a model via legitimate access to the inference API. Inference API access can be a source of information to the adversary ( Discover ML Model Ontology , Discover ML Model Family ), a means of staging the attack ( Verify Attack , Craft Adversarial Data ), or for introducing data to the target system for Impact ( Evade ML Model , Erode ML Model Integrity ).","title":"ML Model Inference API Access"},{"location":"Techniques/#ml-enabled-product-or-service","text":"AML.T0047 Adversaries may use a product or service that uses machine learning under the hood to gain access to the underlying machine learning model. This type of indirect model access may reveal details of the ML model or its inferences in logs or metadata.","title":"ML-Enabled Product or Service"},{"location":"Techniques/#physical-environment-access","text":"AML.T0041 In addition to the attacks that take place purely in the digital domain, adversaries may also exploit the physical environment for their attacks. If the model is interacting with data collected from the real world in some way, the adversary can influence the model through access to wherever the data is being collected. By modifying the data in the collection process, the adversary can perform modified versions of attacks designed for digital access.","title":"Physical Environment Access"},{"location":"Techniques/#full-ml-model-access","text":"AML.T0044 Adversaries may gain full \"white-box\" access to a machine learning model. This means the adversary has complete knowledge of the model architecture, its parameters, and class ontology. They may exfiltrate the model to Craft Adversarial Data and Verify Attack in an offline where it is hard to detect their behavior.","title":"Full ML Model Access"},{"location":"Techniques/#discover-ml-model-ontology","text":"AML.T0013 Adversaries may discover the ontology of a machine learning model's output space, for example, the types of objects a model can detect. The adversary may discovery the ontology by repeated queries to the model, forcing it to enumerate its output space. Or the ontology may be discovered in a configuration file or in documentation about the model. The model ontology helps the adversary understand how the model is being used by the victim. It is useful to the adversary in creating targeted attacks.","title":"Discover ML Model Ontology"},{"location":"Techniques/#discover-ml-model-family","text":"AML.T0014 Adversaries may discover the general family of model. General information about the model may be revealed in documentation, or the adversary may used carefully constructed examples and analyze the model's responses to categorize it. Knowledge of the model family can help the adversary identify means of attacking the model and help tailor the attack.","title":"Discover ML Model Family"},{"location":"Techniques/#poison-training-data","text":"AML.T0020 Adversaries may attempt to poison datasets used by a ML model by modifying the underlying data or its labels. This allows the adversary to embed vulnerabilities in ML models trained on the data that may not be easily detectable. Data poisoning attacks may or may not require modifying the labels. The embedded vulnerability is activated at a later time by data samples with an Insert Backdoor Trigger Poisoned data can be introduced via ML Supply Chain Compromise or the data may be poisoned after the adversary gains Initial Access to the system.","title":"Poison Training Data"},{"location":"Techniques/#establish-accounts","text":"AML.T0021 Adversaries may create accounts with various services for use in targeting, to gain access to resources needed in ML Attack Staging , or for victim impersonation.","title":"Establish Accounts"},{"location":"Techniques/#create-proxy-ml-model","text":"AML.T0005 Adversaries may obtain models to serve as proxies for the target model in use at the victim organization. Proxy models are used to simulate complete access to the target model in a fully offline manner. Adversaries may train models from representative datasets, attempt to replicate models from victim inference APIs, or use available pre-trained models.","title":"Create Proxy ML Model"},{"location":"Techniques/#train-proxy-via-gathered-ml-artifacts","text":"AML.T0005.000 Proxy models may be trained from ML artifacts (such as data, model architectures, and pre-trained models) that are representative of the target model gathered by the adversary. This can be used to develop attacks that require higher levels of access than the adversary has available or as a means to validate pre-existing attacks without interacting with the target model.","title":"Train Proxy via Gathered ML Artifacts"},{"location":"Techniques/#train-proxy-via-replication","text":"AML.T0005.001 Adversaries may replicate a private model. By repeatedly querying the victim's ML Model Inference API Access , the adversary can collect the target model's inferences into a dataset. The inferences are used as labels for training a separate model offline that will mimic the behavior and performance of the target model. A replicated model that closely mimic's the target model is a valuable resource in staging the attack. The adversary can use the replicated model to Craft Adversarial Data for various purposes (e.g. Evade ML Model , Spamming ML System with Chaff Data ).","title":"Train Proxy via Replication"},{"location":"Techniques/#use-pre-trained-model","text":"AML.T0005.002 Adversaries may use an off-the-shelf pre-trained model as a proxy for the victim model to aid in staging the attack.","title":"Use Pre-Trained Model"},{"location":"Techniques/#discover-ml-artifacts","text":"AML.T0007 Adversaries may search private sources to identify machine learning artifacts that exist on the system and gather information about them. These artifacts can include the software stack used to train and deploy models, training and testing data management systems, container registries, software repositories, and model zoos. This information can be used to identify targets for further collection, exfiltration, or disruption, and to tailor and improve attacks.","title":"Discover ML Artifacts"},{"location":"Techniques/#user-execution","text":"AML.T0011 An adversary may rely upon specific actions by a user in order to gain execution. Users may inadvertently execute unsafe code introduced via ML Supply Chain Compromise . Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link.","title":"User Execution"},{"location":"Techniques/#unsafe-ml-artifacts","text":"AML.T0011.000 Adversaries may develop unsafe ML artifacts that when executed have a deleterious effect. The adversary can use this technique to establish persistent access to systems. These models may be introduced via a ML Supply Chain Compromise . Serialization of models is a popular technique for model storage, transfer, and loading. However, this format without proper checking presents an opportunity for code execution.","title":"Unsafe ML Artifacts"},{"location":"Techniques/#valid-accounts","text":"AML.T0012 Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access. Credentials may take the form of usernames and passwords of individual user accounts or API keys that provide access to various ML resources and services. Compromised credentials may provide access to additional ML artifacts and allow the adversary to perform Discover ML Artifacts . Compromised credentials may also grant and adversary increased privileges such as write access to ML artifacts used during development or production.","title":"Valid Accounts"},{"location":"Techniques/#evade-ml-model","text":"AML.T0015 Adversaries can Craft Adversarial Data that prevent a machine learning model from correctly identifying the contents of the data. This technique can be used to evade a downstream task where machine learning is utilized. The adversary may evade machine learning based virus/malware detection, or network scanning towards the goal of a traditional cyber attack.","title":"Evade ML Model"},{"location":"Techniques/#backdoor-ml-model","text":"AML.T0018 Adversaries may introduce a backdoor into a ML model. A backdoored model operates performs as expected under typical conditions, but will produce the adversary's desired output when a trigger is introduced to the input data. A backdoored model provides the adversary with a persistent artifact on the victim system. The embedded vulnerability is typically activated at a later time by data samples with an Insert Backdoor Trigger","title":"Backdoor ML Model"},{"location":"Techniques/#poison-ml-model","text":"AML.T0018.000 Adversaries may introduce a backdoor by training the model poisoned data, or by interfering with its training process. The model learns to associate a adversary defined trigger with the adversary's desired output.","title":"Poison ML Model"},{"location":"Techniques/#inject-payload","text":"AML.T0018.001 Adversaries may introduce a backdoor into a model by injecting a payload into the model file. The payload detects the presence of the trigger and bypasses the model, instead producing the adversary's desired output.","title":"Inject Payload"},{"location":"Techniques/#exfiltration-via-ml-inference-api","text":"AML.T0024 Adversaries may exfiltrate private information via ML Model Inference API Access . ML Models have been shown leak private information about their training data (e.g. Infer Training Data Membership , Invert ML Model ). The model itself may also be extracted ( Extract ML Model ) for the purposes of ML Intellectual Property Theft . Exfiltration of information relating to private training data raises privacy concerns. Private training data may include personally identifiable information, or other protected data.","title":"Exfiltration via ML Inference API"},{"location":"Techniques/#infer-training-data-membership","text":"AML.T0024.000 Adversaries may infer the membership of a data sample in its training set, which raises privacy concerns. Some strategies make use of a shadow model that could be obtained via Train Proxy via Replication , others use statistics of model prediction scores. This can cause the victim model to leak private information, such as PII of those in the training set or other forms of protected IP.","title":"Infer Training Data Membership"},{"location":"Techniques/#invert-ml-model","text":"AML.T0024.001 Machine learning models' training data could be reconstructed by exploiting the confidence scores that are available via an inference API. By querying the inference API strategically, adversaries can back out potentially private information embedded within the training data. This could lead to privacy violations if the attacker can reconstruct the data of sensitive features used in the algorithm.","title":"Invert ML Model"},{"location":"Techniques/#extract-ml-model","text":"AML.T0024.002 Adversaries may extract a functional copy of a private model. By repeatedly querying the victim's ML Model Inference API Access , the adversary can collect the target model's inferences into a dataset. The inferences are used as labels for training a separate model offline that will mimic the behavior and performance of the target model. Adversaries may extract the model to avoid paying per query in a machine learning as a service setting. Model extraction is used for ML Intellectual Property Theft .","title":"Extract ML Model"},{"location":"Techniques/#exfiltration-via-cyber-means","text":"AML.T0025 Adversaries may exfiltrate ML artifacts or other information relevant to their goals via traditional cyber means. See the ATT&CK Exfiltration tactic for more information.","title":"Exfiltration via Cyber Means"},{"location":"Techniques/#denial-of-ml-service","text":"AML.T0029 Adversaries may target machine learning systems with a flood of requests for the purpose of degrading or shutting down the service. Since many machine learning systems require significant amounts of specialized compute, they are often expensive bottlenecks that can become overloaded. Adversaries can intentionally craft inputs that require heavy amounts of useless compute from the machine learning system.","title":"Denial of ML Service"},{"location":"Techniques/#spamming-ml-system-with-chaff-data","text":"AML.T0046 Adversaries may spam the machine learning system with chaff data that causes increase in the number of detections. This can cause analysts at the victim organization to waste time reviewing and correcting incorrect inferences.","title":"Spamming ML System with Chaff Data"},{"location":"Techniques/#erode-ml-model-integrity","text":"AML.T0031 Adversaries may degrade the target model's performance with adversarial data inputs to erode confidence in the system over time. This can lead to the victim organization wasting time and money both attempting to fix the system and performing the tasks it was meant to automate by hand.","title":"Erode ML Model Integrity"},{"location":"Techniques/#cost-harvesting","text":"AML.T0034 Adversaries may target different machine learning services to send useless queries or computationally expensive inputs to increase the cost of running services at the victim organization. Sponge examples are a particular type of adversarial data designed to maximize energy consumption and thus operating cost.","title":"Cost Harvesting"},{"location":"Techniques/#ml-artifact-collection","text":"AML.T0035 Adversaries may collect ML artifacts for Exfiltration or for use in ML Attack Staging . ML artifacts include models and datasets as well as other telemetry data produced when interacting with a model.","title":"ML Artifact Collection"},{"location":"Techniques/#data-from-information-repositories","text":"AML.T0036 Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Information stored in a repository may vary based on the specific instance or environment. Specific common information repositories include Sharepoint, Confluence, and enterprise databases such as SQL Server.","title":"Data from Information Repositories"},{"location":"Techniques/#verify-attack","text":"AML.T0042 Adversaries can verify the efficacy of their attack via an inference API or access to an offline copy of the target model. This gives the adversary confidence that their approach works and allows them to carry out the attack at a later time of their choosing. The adversary may verify the attack once but use it against many edge devices running copies of the target model. The adversary may verify their attack digitally, then deploy it in the Physical Environment Access at a later time. Verifying the attack may be hard to detect since the adversary can use a minimal number of queries or an offline copy of the model.","title":"Verify Attack"},{"location":"Techniques/#craft-adversarial-data","text":"AML.T0043 Adversarial data are inputs to a machine learning model that have been modified such that they cause the adversary's desired effect in the target model. Effects can range from misclassification, to missed detections, to maximising energy consumption. Typically, the modification is constrained in magnitude or location so that a human still perceives the data as if it were unmodified, but human perceptibility may not always be a concern depending on the adversary's intended effect. For example, an adversarial input for an image classification task is an image the machine learning model would misclassify, but a human would still recognize as containing the correct class. Depending on the adversary's knowledge of and access to the target model, the adversary may use different classes of algorithms to develop the adversarial example such as White-Box Optimization , Black-Box Optimization , Black-Box Transfer , or Manual Modification . The adversary may Verify Attack their approach works if they have white-box or inference API access to the model. This allows the adversary to gain confidence their attack is effective \"live\" environment where their attack may be noticed. They can then use the attack at a later time to accomplish their goals. An adversary may optimize adversarial examples for Evade ML Model , or to Erode ML Model Integrity .","title":"Craft Adversarial Data"},{"location":"Techniques/#white-box-optimization","text":"AML.T0043.000 In White-Box Optimization, the adversary has full access to the target model and optimizes the adversarial example directly. Adversarial examples trained in this manor are most effective against the target model.","title":"White-Box Optimization"},{"location":"Techniques/#black-box-optimization","text":"AML.T0043.001 In Black-Box attacks, the adversary has black-box (i.e. ML Model Inference API Access via API access) access to the target model. With black-box attacks, the adversary may be using an API that the victim is monitoring. These attacks are generally less effective and require more inferences than White-Box Optimization attacks, but they require much less access.","title":"Black-Box Optimization"},{"location":"Techniques/#black-box-transfer","text":"AML.T0043.002 In Black-Box Transfer attacks, the adversary uses one or more proxy models (trained via Create Proxy ML Model or Train Proxy via Replication ) models they have full access to and are representative of the target model. The adversary uses White-Box Optimization on the proxy models to generate adversarial examples. If the set of proxy models are close enough to the target model, the adversarial example should generalize from one to another. This means that an attack that works for the proxy models will likely then work for the target model. If the adversary has ML Model Inference API Access , they may use this Verify Attack that the attack is working and incorporate that information into their training process.","title":"Black-Box Transfer"},{"location":"Techniques/#manual-modification","text":"AML.T0043.003 Adversaries may manually modify the input data to craft adversarial data. They may use their knowledge of the target model to modify parts of the data they suspect helps the model in performing its task. The adversary may use trial and error until they are able to verify they have a working adversarial input.","title":"Manual Modification"},{"location":"Techniques/#insert-backdoor-trigger","text":"AML.T0043.004 The adversary may add a perceptual trigger into inference data. The trigger may be imperceptible or non-obvious to humans. This technique is used in conjunction with Poison ML Model and allows the adversary to produce their desired effect in the target model.","title":"Insert Backdoor Trigger"},{"location":"Techniques/#ml-intellectual-property-theft","text":"AML.T0045 Adversaries may exfiltrate ML artifacts to steal intellectual property and cause economic harm to the victim organization. Proprietary training data is costly to collect and annotate and may be a target for Exfiltration and theft. MLaaS providers charge for use of their API. An adversary who has stolen a model via Exfiltration or via Extract ML Model now has unlimited use of that service without paying the owner of the intellectual property.","title":"ML Intellectual Property Theft"}]}